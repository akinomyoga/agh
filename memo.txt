agh/js - Ageha JavaScript Library v3.2
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
  Memo
-------------------------------------------------------------------------------

2016-06-10

  * コマンドラインから vcproj をビルドする方法

    [[c++ - Building Visual Studio 2008 solution from command line - Stack Overflow>http://stackoverflow.com/questions/8215522/building-visual-studio-2008-solution-from-command-line]]


    .sln (Solution 全体) をビルドする時

      devenv /build release /project <projname> <solutionfile>.sln

    .vcproj をビルドする時

      "C:\Program Files\Microsoft Visual Studio 9.0\VC\vcpackages\vcbuild.exe" <myproj>.vcproj "Release|Win32"

      しかし Microsoft Visual Studio 10.0 (Beta) にはその様な実行形式は含まれていない様だ。単に Beta だからという可能性もあるが。

    .proj をビルドする時

      msbuild.exe projectname.proj /property:Configuration=Release


雑記: 命名規則概略

  命名規則の統一を考える為に、様々な環境でどの様な命名規則が使われるのかについてまとめてみる事にする。

  * 識別子の構成方法

    複数の単語を繋げて識別子名を作る時、様々なやり方がある。

    - helloworld
    - HELLOWORLD
    - hello_world
    - HELLO_WORLD
    - helloWorld
    - HelloWorld
    - hello-world (lisp, css)
    - \hello@world (tex)

    一般的には、どれか一つに統一するのが望ましいとされるが、
    複数の方法を使って識別子の種類を区別する事もある。
    例えば、C言語の系統では HELLO_WORLD の形式は定数・マクロで使われる事が多い。
    また Java では  HelloWorld は型名・クラス名に使用し
    helloWorld を関数名・変数名に使用する。
    また、公開関数・公開変数には HelloWorld を使用し、
    内部関数・内部変数には helloWorld または _ で始まる物を使うという方法もある。

  * 関数名

    基本的に動詞 (命令形) で始めるのが普通である。

    複数の組となる操作を行う関数群には、
    getHoge/setHoge 等の様に動詞部分だけを入れ替えた関数名がよく使われる。

    - get/set, get/put, read/write (取得・設定、入力・出力)
    - set/unset, set/reset
    - allocate/free, new/delete
    - add/remove/prepend/append/insert (追加・削除)
    - push/pop (スタック, LIFO)
    - enque/deque, enq/deq (キュー, FIFO)
    - shift/unshift (JavaScript 配列, 先頭への要素の挿入)

    - create, initialize, clear, load, save

    C/Fortran など名前空間のない古い言語では、
    識別子名の前に操作の種類やライブラリを区別する prefix を付ける事がある。
    mem/str/wcs 等々。

    単体の名詞を関数名とする場合は、副作用なく何らかの値を取得する関数である。
    C++ ではこの類の取得関数があるが、対応する設定関数は普通用意されない。
    引数を取らない物と引数を取る物をオーバーロードして、
    前者を値の取得関数とし後者を値の設定関数とする事もある。
    例えば jQuery などはこれである。

    is/can で始まる関数は、術語関数 (副作用が無く真偽値を戻す) を表す。
    更に、動詞 (三単現) で始まる関数を術語関数とする事も多い。
    Ruby では ? で終わる関数名を用いる。elisp では p で終わる関数名を用いる。

    Ruby では ! で終わるメソッド名は、
    オブジェクトに対する破壊的な操作を表す。
    ! の無いメソッドも同時に定義されている場合、
    そちらは操作後の状態を持つ新しいオブジェクトを生成する。

  * 変数・型名

    通常は名詞、名詞節を変数名・型名とする。
    C 系統では定数・マクロは全て大文字で _ で繋いで表現する事が多い。
    また、特定の単語は高頻度で特定の種類の変数・型である事を表す。

    - property/attribute
    - processor/handler/listener/observer 何処かに登録して実行して貰う関数オブジェクト
    - i/j/k カウンタ・インデックス (ローカル変数)
    - iterator, enumerator
    - descriptor 何らかの情報を取得する為のオブジェクト
    - buffer,

    最近では内部で使用する場合でも a や b や c 等の短い変数名ではなくて、
    polarAngle, impactParameter, cosine などの内容を説明する名詞節にする方が良いとされる。


-------------------------------------------------------------------------------
  ToDo
-------------------------------------------------------------------------------

2019-12-01

  * aghtex: paragraph mode で \text が使えないのは変だ。
    →実際に pdflatex で試すとちゃんと \text が使える。

    mod_math での \text の実装は以下の通り。
      text: ['s@;#mode.para>1', '<tex:f class="aghtex-textrm">#1</tex:f>'],

    さて。ここで問題になるのは paragraph mode の中で text を使った時のフォント。
    rm に強制されるのか或いは外側のフォントがそのまま使われるのか。
    →試しに使ってみたところ外側のフォントが使われる様だ。
    →更に試しに数式モードの中で text を実行してみると、
      外側の paragraph mode のフォントが使われるという事が分かった。

  * aghtex: \text によるフォントを正しく実装する?
    現状の実装では数式モードにおける \text のフォントは roman に固定している。
    然し、実際の TeX では外側の最初の paragraph mode におけるフォントが使われる。
    これに対応するには現在のフォントについてちゃんと把握しながら処理する必要がある。
    それで文字列を出力する時にフォント情報も一緒に出力するのである。

  * aghtex: tableofcontents が壊れている。

  * aghtex: \tag に対応する

    先ず tex の動作を確認しなければならない。
    - 式番号のカウンターは増えるのか。
    - 複数指定した時にはどのように振る舞うのか。
    - 数式以外の場所で \tag を呼び出すとどうなるのか。
    - インライン数式で呼び出すとどうなるのか。
    - \text{$...$} の中で呼び出しても使えるのか。

  * aghtex: \genfrac の高さ。

    現状の実装では vertical-align: middle にしている。
    しかし、通常の分数と同様に上の要素と下の要素の境界が中心になるようにするべきではないか。
    実際に TeX の振る舞いを見てみると左右の括弧の大きさは \binom では固定になっている。
    中身に応じて伸縮したりする事はない。つまり、中身が大きいと上下にはみでる。
    しかしそれでも上下の要素の境界の位置は固定である。

2015-09-14

  * 計画 agh.syntax.js

    agh.text.color.js に実装してみて多少考えた事を整理しておく。

    * 先ず、context を push/pop して入れ子構造を解析する方法は意外と問題なく実装できる様だ。
      途中で regex を変更できる様な agh.RegExp.indexibleReplace が十分強力な為だと思われる。

    * ただ着色するだけなので表示文字が入れ替わってしまうのは不味い。
      現在の実装だと余りに自由な為に表示文字を入れ替えてしまう様な実装も可能である。

    * 現在は正規表現を結合して処理を行っている。

      1 しかしこの方法だと柔軟性に欠ける。

        例えば、文脈 ctx に応じて各正規表現要素の on/off を切り替えたいとする。
        現状の実装だと ctx の状態に応じて一つ一つ結合された正規表現を用意しなければならない。
        また、後方一致 (?<) (?!<) の簡単な対応や、
        独自の正規表現エンジンなどを混在して用いる場合、
        正規表現が結合されていると処理できない。

      2 別々に処理した時の懸念は速度であるがこれは再考が必要である。

        元々正規表現を結合していたのは速度を気にしての事である。
        何度も正規表現エンジンの関数をスクリプトから呼び出すよりは、
        巨大な正規表現を用意して置いてそれをスクリプト側から
        一発で呼び出した方が早いのではないかという事である。

        しかし agh.LaTeX の scanner の実装の経験上、現実の JavaScript エンジンでは
        正規表現を結合しなくてもそれ程速度に差がないのではないかという気がする。

        - 特に正規表現を結合した場合 "一致した正規表現" の特定に時間が掛かるし、
        - また、キャプチャグループの数が無駄に多くなり速度低下を生む。
          (agh.LaTeX での経験上キャプチャグループの数に比例して時間が増大する。
          バックトラック用のデータを記録するのにキャプチャグループの数だけ
          データをコピーして記録している為であろうか。)

        とはいいつつも実際に測定していないのでどれだけの差があるのかは未知である。
        結合せずに適用した時の速度についても確認しておく必要がある。
        (場合によってはオプションで結合・非結合を選択できるようにすると良いかも知れない。)

    * diff や shell `...` など、内部に「エスケープされた別言語ソース」を含む場合の処理

      これらについての処理についてもこれを機会に考えると良い気がする。
      現在関連する機能を試験的に agh.syntax/html_slice.js に実装している。
      これはもう少し考えてから実装する必要がある。

      html_slice.js について
      - 整理する。各関数を統合する。
      - 各機能のオプション(動作詳細)について考える。


2015-08-30

  * 取り敢えず git repository として初期化した。

    未だ追加されていないファイルなどについても整理して追加する必要がある。

  * 今回再度 agh を弄ろうと考えたのは syntax highlight を再考したい為である。

    特に、複雑な文脈と入れ子構造を持つ bash script を着色するに当たってどの様な実装が必要になるかを考える。
    現在、着色に関係しそうなコードは以下の場所に分散している。
    - agh.regex.js             ... これは正規表現を多少使いやすくする為のクラスを含む。
    - agh.text.color.js        ... ここに現在の実装の大半が含まれている。
    - agh.syntax/regex_i2.js   ... ここには後方零幅表明を指定可能な正規表現の試験的な実装が含まれる。
    - agh.syntax/html_slice.js ... ここには複数の着色機構による交差するタグ付けを処理する為の試験的な実装が含まれる。

    今後は agh.syntax/ 以下に新しくファイルを作って実装する事にする。

    既存実装についても確認しておく。

    | GNU source-highlight (src-highlite) 評価=○
    |   実装手法: この実装は agh.text.color.js と似たような実装になっている。
    |   複数の文法要素を同時に一致させて一番早く一致した物を採用するという方式である。
    |   (但しマニュアルを見ると、一つの正規表現に結合して一致しているのではなく、
    |   全ての登録された正規表現について一つ一つ一致を試みる様な書き方をしてある。)
    |   また、agh.text.color.js における stage の概念はない。
    |   つまり 1 pass で着色できる場合にしか対応していない。
    |
    |   また、文法定義の為の言語を用意して簡単に定義できるようになっている。
    |
    |   GNU project でありながら余りアクティブに開発されていない様だ。
    |   実際にコードを書いている人は一人しかいないように見える。
    |   何よりどの様に constribute したらよいのかが不明瞭だからだろうか。
    |   文法定義ファイルも長らく更新されていない様に見える。
    |
    | highlight.js 評価=×
    |   [[https://github.com/isagalaev/highlight.js]]
    |
    |   色付け対象としての言語には様々な物に対応している。
    |
    |   実装手法: しかし、実装自体は単純で複雑な文法は取り扱えないように見える。
    |   特に、GNU source-highlight で使っているような「一番初めに一致した表現」に対応していないので駄目な実装だ。
    |
    |
    | SyntaxHighlighter 評価=×
    |
    |   [[syntaxhighlighter/syntaxhighlighter>https://github.com/syntaxhighlighter/syntaxhighlighter]]
    |
    |   各言語毎に正規表現を指定できる。XRegExp を外部ライブラリとして使用している Brush もある。
    |   しかしながら滅茶苦茶に細分化されていてソースコードが醜い。下らない機能毎にプロジェクトになっている…。酷い。
    |   例えば parser は簡単に言うと XRegExp.match を実行するだけのプロジェクトである。
    |
    |   実装手法: 先ず初めに各言語要素についての一致を全て列挙して、その後でそれを sort し適用するという形になっている。
    |   この様な実装で例えば /* " */ "hello" /* " */ の様な物を正しく parse できるのかは怪しい。
    |
    | Prism 評価=×
    |   [[PrismJS/prism>https://github.com/PrismJS/prism]]
    |
    |   実装手法: 何か変な実装方法を採っているが、これも各言語要素の正規表現の繰り返し適用である。
    |   適用対象を [文字列,token,文字列,token,文字列] という様な配列で表現する。
    |   この "文字列" の部分に対して正規表現を適用して、新しく 文字列,token,...,文字列 とした部分列を splice で挿入する。
    |   一番初めの状態は [文字列] であり、正規表現を適用するたびに細分されていくという実装である。
    |
    |   これも微妙な実装である。例えば /* " */ "hello" /* " */ を正しく評価できるのか怪しい。
    |
    |   ただこれも色付け対象の言語としては色々な物に対応している様だ。
    |
    | SHJS 評価=○
    |   [[SHJS - Syntax Highlighting in JavaScript>http://shjs.sourceforge.net/]]
    |
    |   実装手法: source-highlight と同じ様である。というか、言語定義ファイルの内容も source-highlight と同じ??
    |   JavaScript の実装にはまともな物がないのだろうかと諦めていた所だったが意外とちゃんとした物もあった。
    |   但し、正規表現を連結して効率を高めるという発想には到っていない様だ (もしかするとこちらの方が早い可能性も?)。
    |   また、stage の概念などもやはり無いようである。
    |
    | google-code-prettify 評価=◎
    |   [[google/code-prettify>https://github.com/google/code-prettify]]
    |
    |   実装手法: agh.text.color.js と同じく各言語要素の正規表現を一つに結合して一致を試みる方法を採っている。
    |   stage の概念はない。
    |
    |   ただ対応している言語は少ないかも。

    既存実装を色々見てみたが大体馬鹿な実装で、
    ちゃんとした実装も agh.text.color.js を超える物は存在しないようだ。
    既存実装については余り気にせずに自由に実装を考える方針にする。

    現在の正規表現の実装に関しても確認を行っておく
    →この際だから整理する事にした。[2015-08-30 agh.regex.js 整理] を参照の事。

    さて agh.regex.js の実装も整理したので今度は agh.text.color.js の実装について考える。

    1 実のところ agh.text.color.js 等という長い名前は分かりにくいので agh.highlight.js という名前にでも変えたい所である。
    2 入れ子構造を解釈するために枠組みを整える
    3 "${}" 等の簡単な記述法による変換規則の指定。
      これは agh.Text.RegexConvterterRule ctor の handler 生成で実装仕掛けの状態になっている。

    目下の所は入れ子構造を解釈するにはどの様な物が必要かについて考える。
    基本的には途中で文脈を push してそれを後で pop するという形になると思う。
    或いは、途中で switch するという事もあるかもしれない。
    何れにしても "文脈" 毎に文法要素のセットを作成する必要がある。
    文脈の継承関係などについても考慮に入れる様にしたい。

    文脈の定義を試しにしてみてからそれを扱うためのクラスを作成するか、
    先に処理する機構を作ってから文脈を定義してみるか。
    →取り敢えず文脈の定義を試験的に行ってみるべきである。

Known Bugs:

  * aghtex4chrome: reload した時に \r\n が二重改行になっている。
  * latex.\mathbb: IE8-std で表示されていない。
  * latex.\left: sup, sub として高さのある物を指定すると中身が変な位置に表示される。(sup/sub を table 内に表示するのは限界があるか?)
  * latex.\leadsto: 記号のうねりの数が異なる
  * 技術的問題 (保留)
    - latex.\frac: IE6-IE8 連分数が綺麗に表示できない (IE8-std ではどうか?)
    - latex/上付下付: IE6-7 上付と下付を重ねて表示できない
    - latex/上付下付: IE8 上付と下付を同時に表示する時、下付に分数など高さのある物を表示すると上付の位置が上へ移動する。
    - latex.\underbrace: Sf で undertext に二行以上書くと、下の文字列と被る。
      (Sf は table vertical-align:baseline に対応していない?)

実装中:

  * 2013-11-06 "latex/mod_math.ctx: mathstyles"

    latex/mod_math.ctx, pkg_ams.ctx: mathstyles は Document#flags を用いれば簡単に実装できるかも。
    →mathstyles は context と共にクリアされる性質の物なので Document#flags ではなくて、
    Document#Get/SetContextVariable を使うべき物である。

    と思って SetContextVariable を使って
    \displaystyle の類の実装を追加しようと思ったら、既に存在していた。
    但し、scriptstyle, scriptscriptstyle に就いて、
    フォントの大きさも指定する様にする事が todo になっている。

  * latex/core.js

    色々細かい物を実装していく内に、段々とコア部分の固定的な実装が問題になってきた。
    例えば、scanner による字句の読み取り方法が固定されている。
    コマンドはコマンドとして読み取られるし、コメントはコメントとして読み取られる。
    しかし、本当の TeX は殆どの場合に於いてその様に動作するが、
    \verb やその他の特別なコマンドの中では \catcode を設定する事に拠って何とでも読み取り方法を変更する事が可能である。
    今までは速度を重視するという言い訳でこれらの対応を渋ってきたが、
    今後ちゃんとした実装を目指す上ではこの辺りからしっかりとしておきたい所である。
    (もちろん、標準的な文脈では今まで用いてきた最適化された scanner を使用する様にしたい。)

    その為には、既存の TeX の読み取りの方法について予め調べておく必要がある。
    \catcode コマンドは、\catcode整数=整数 の形式を取る。
    初めの整数は文字コードで次の整数は catcode である。
    catcode のそれぞれの意味については http://en.wikibooks.org/wiki/TeX/catcode を参照する。

  * TeX の字句・レジスタなどについて:

    - 整数の指定: 整数を直接表記する。

      または、文字コードで指定する: ` に続けて文字を記すとその文字のコードが使用される。
      ` に続けてコマンド名を記すとそのコマンドに割当てられた番号が使用される。
      一文字の名前のコマンドに関してはその文字の文字コードであるが、
      複数文字のコマンドの場合は TeX 実行の過程で適当に割り当てられた番号が表示される。
      16進数で指定する事もできる: " に続けて16進数を記せば良い。
      8進数で指定する場合には ' に続けて 8 進数を指定する。

    - dimen の指定: 単位付き長さを指定する。
      小数+単位 または 長さコマンド または 小数+長さコマンド を指定する。

    - glue(skip):

      更に glue は dimen の後に plus &lt;dimen&gt; minus &lt;dimen&gt; を後ろに続ける事ができる。
      また Glueコマンドを指定する事もできる。
      (glue が使える箇所もあれば、単独の dimen しか使えない箇所もある?)
      a plus b minus c は CSS3 flex-grow, flex-shrink, flex-basis, max-width, min-width を組み合わせれば何とか対応できる?
      因みに \hfill は max-width:fill-available (-moz-available, -moz-fill-available) というのがあるらしい。

    - ^^ は Control 文字を生成する charcode|=64.</li>

    これらのリテラルを読み取る時は単に字面で読み取るのではなく、
    マクロについての展開も実行される。
    特に数字に関してはマクロが展開された後に連結されて解釈される。
    とはいいつつも、取り敢えず、字面を見る実装でもいいから実装してしまったほうが良い様な気もする。

-------------------------------------------------------------------------------

2014-09-27

  * ■aghtex4chrome/preview: 改行が消えている (これは新しい編集画面で改行が div に置換される為)
  * latex: usepackage{array} の \tabularline
  * ■latex:cmd.overline: 文字毎に上線が引かれる。本来は全体に対して overline が引かれるべきなのでは?^^要確認^^
  * latex: コマンドには long/not long という物があるらしい。
    - \long\def, \newcommand etc. は long であり、\def, \newcommand*, etc. は not long である。
    - long のコマンドの引数は 空行, \par を含む事ができる。
    - not long なコマンドの引数は 空行, \par があるとエラーになる。
    - 参考: [[macros - What's the difference between \newcommand and \newcommand*? - TeX - LaTeX Stack Exchange>http://tex.stackexchange.com/questions/1050/whats-the-difference-between-newcommand-and-newcommand]]
  * latex: TOCHECK, \makeatletter\def\hoge{\hoge@hoge}\makeatother 等と定義した物を \makeatother の状態で使用した時、どう動作するべきか?

2014-03-13

  * latex/aghfonts:

    - アルファベット roman 体も収録する。linux 等一部の OS でまともな roman 体が表示されない為。
    - 数字も収録する。

2014-03-08

  * verbatim ← % も読み取れる字句解析が必要 ← \catcode レジスタ ← TeX レジスタの包括的実装(?)

2014-03-07

  * latex/cls_article.ctx: cls:article abstract の動作について調べて再実装する。
  * latex/cls_article.ctx: \today 対応。どこに定義するべきか、どの様に定義するべきか。
  * latex/cls_article.ctx(cls:revtex4): \email を複数指定した場合の動作。
  * latex/cls_article.ctx(cmd:email): \email を追加する
  * 目標 http://tex.stackexchange.com/questions/38674/the-the-command
  * 目標 http://note.golden-lucky.net/2012/12/textex.html
  * こんな物も→ dvi.js https://github.com/naoyat/dvi.js/wiki

2013-11-06

  * latex/mod_common.ctx: textvisiblespace 幅が大きいのでフォントを埋め込む。
  * latex/base.ctx: 伸縮括弧を svg にする? svg が fontforge から出力できたはず。background-size でも伸縮できる様だ。
  * latex/aghfonts:mathrm: bugfix, u2032 は本来大きな prime ではなくて、上付の prime の意味である。
    なのでグリフを mathrm から mathbb に移動し、\prime の class を Amc に変える。
  * latex/font:aghtex_mathrm: \pounds (math/text-mode), \textsterling (text-mode) は cmu に入っている(?)ので、移動してくる。
  * latex/font:aghtex_mathbb: 1, 2 がないので、何処からか持ってくる。
  * latex/mod_common: \symbol は unicode で良い様なので実装する。フォントは指定しない。
  * latex/font:aghtex_mathcal: 小文字は ekcal 辺りから持ってきても OK?

2013-11-05

  * latex/pkg_ams.ctx: \sqrt の尻尾に最大高さを設定する? (余り高さのある要素を中に指定すると伸び切ってしまうので。)
    td[valign="bottom"] にして、尻尾の部分を img[style="max-height:5em;"] 等にすれば良い?

  * latex: \bigl, \bigr などのフォント変更。
  * agh.lang.ps: systemdict.define_operators (register_operator を一括で行う) ■中途半端な状態になっているので正しく実装。
  * agh.lang.ps: arc 関連の実装 [P1.4 in memo.txt]

  * latex: \bigsqcup

2013-11-04

  * latex/pkg_ams.ctx: \dots, 続きに来る word に応じて種類を変化させる。
  * latex/pkg_ams.ctx(cmd_genfrac): mathstyle (displaystyle/textstyle など) に対応。
  * latex/pkg_ams.ctx(cmd_genfrac): 下付・上付に対応? (platex の動作を確認)
  * latex/mod_math.ctx(cmd_int): mathstyles に対応。
  * latex/mod_math.ctx(cmd_int): 上付・下付の位置について。
    括弧などで囲んだ時に括弧が大きくなり過ぎない様に、上下にはみ出させているが、
    これによって上下の数式と被ってしまっている。
    括弧が大きく為りすぎるのは仕方がないので、上下にはみ出るのは止めた方が良い。

2013-08-31

  * agh.js (addEventListener): IE MemLeak Support Version Restriction

2013-08-29

  * agh.debug.js (DomTreeNode): コードの整理
  * agh.debug.js (DomTreeNode): HTML 要素の表示
  * agh.debug.js (DomTreeNode): 値の編集機能
  * agh.debug.js (DomTreeNode): 開いた時刻の表示と更新ボタン
  * agh.debug.js (DomTreeStackInfo): 関数引数の読み取り
  * agh.debug.js: ドキュメントコメントの解釈
  * agh.debug.js: HTMLTreeNode?

2013-08-21

  * agh.dom.js: 整理

    - Fx で補完される innerText の内容が異なる。
    - innerText 取得: [[DOM の textContent と innerText について - フリーフォーム フリークアウト>http://d.hatena.ne.jp/cou929_la/20110517/1305644081]]
    - innerText 取得: [[plain-text.js>http://clubajax.org/files/lang/plain-text.js]]

2013-08-02

  * latex/latex.pp.css: 下付・上付などの文字は画面に表示する事を想定して余り小さくならない様にしているが、
    印刷する時には本来の小ささになるようにしても良いのではないか。

2013-01-21

  * prog.std.css: prog-items のアイコンの指定を整理。
  * agh.text.color.js: C++ Concept (非標準) の keyword を追加。

2013-01-14

  * latex/pkg:amsmath/env:flalign: \hfill の効果を正しく表示する (間に width:100% の要素を追加すれば良い?)

2012-12-24

  * ns.Command2

    - latex: %%脆弱性 ユーザ定義マクロでの #1 以外の引数の形式を禁止する。%% と思ったが、tex source に展開されるので問題なし。
    - latex/ns.Command2: 長さを解釈するコード (scanner も一緒に対応?)
    - latex/ns.Command2: trim, escape 等の修飾を充実させる。現在の機能と導入する機能の整理
    - latex/ns.Command2: 引数読み取り部はコードを生成する様に変更

  * latex/cls:revtex, revtex4, jarticle, jsarticle, book, jbook, jsbook, report, jreport, jsreport
  * latex/pkg:mathrsbf

2012-12-23

  * addon/aghtex4chrome/*.tex: タイトルをブラウザに反映させる?
  * addon/index.htm: 説明, Windows での関連づけについて, emacs の設定について
  * latex/error-globalization: 既存の他のエラーについても globalization を利用する形式に変更する

2012-12-21

  * latex: \centering, \medskip, \newbox, \savebox, etc
  * latex/mod_length: parseUnit が失敗している時の状況について調べる, 単位の代わりに \textwidth 等となっていればそれに対応する
  * latex/aghtex4chrome.js: gmail 等でも background page で変換する? (元々ロードに時間が掛かるので現状は大して気にならない)

latex

  * latex: スクリプト生成機構の整理

    - latex.*.js: 現在三つのファイルに分かれているが、一つのファイルに纏める
    - ctxc: c++ による再実装?
      - javascript scanner (正規表現の対応も含めて)
      - command, letter, environment: command s\hoge() 形式の認識
      - context 形式の認識, context は (function(){})(); で囲む
      - package 形式の認識, (function(){})()
      - mwg_pp.awk: # ディレクティブは mwg_pp.awk に食わせる様に変更
      - mwg_pp.awk: css 等を混在。現在は直接 mwg.latex.pp.css に記入している。

  * optimize

    - latex/latex.cor.js: GetLetterHandler 呼出回数が多い → context を flatten する / pkg では直接コピーする。

  * latex: Courier New グリフのサイズが大きい。tt 用に別のフォントを埋め込むか?
  * viewtex: ページ内リンク highlight
  * viewtex: References の pdf へのリンク。
  * latex: \footnote 逆リンク
  * latex: \input, \include で他の .tex ファイルを読み込める様にする。XMLHttp
  * latex.\par, \n\n: まともな実装。

    - \begin{document} の ns.Writer に手を加える? または (ユーザコマンドではなく) コマンドを定義する。
    - latex: ctx:mode.para を ctx:mode.text に変更して ctx:mode.para (mode.text 継承) を新規に定義?
    - 現在の段落の状態 (&lt;p&gt; の中にいるかいないか) の情報を保持する変数、
    - コマンドによって自動的に &lt;p&gt; を閉じるか閉じないかを指定する方法。

  * latex/frac, etc: border-color: inherit を指定すれば外側の文字列の色が反映される (Cr)
  * latex: IE8-std で table{vertical-align:baseline} を利用?
  * latex 動作確認: \underbrace (IE8-std table{vertical-align:baseline;}?)
  * latex/フォント:

    - latex/cmd:\oint: 色々な積分記号のフォント (smallint を symb に。int は syma に。)
    - ■latex/aghtex_mathsymb, aghtex_mathsyma: 英字グリフを BaKoMa の物から AmsFonts の物に置き換える。
    - latex/font: 黒板体, 筆記体, etc: aghtex_mathsymb, aghtex_mathsyma に統合する?

      ? mathsymb, mathsyma と共存する書体を決定する?
      - mathsymb は標準的な Unicode での数学記号に対応する。一緒にするなら mathit?
      - mathsyma は代替的な自体を提供する。mathcal, mathbb 辺りと共存させれば OK。

    - latex/font:mathcal: 現在は cmsy5 より。潰れている。cmsy10 から作り直す
    - latex/font:mathbm: \imath \jmath \ell \weierstrass
    - latex/font:mathit: \Digamma \varkappa \backepsilon 移動
    - latex/font:mathsymb: \Digamma \varkappa \backepsilon 太字体
    - latex/font:mathsymb: \Digamma \varkappa \backepsilon 直立体


  * latex: コマンド

    - env:deluxetable, \AtBeginDocument, \AtEndDocument, \gdef
    - latex/env:equation: \eqno, \leqno, \notag, \eqnref, \theequation
    - latex: \sbox, \begin{lrbox}, \makebox, \parbox, \rule, \newsavebox, \savebox, \usebox, \raisebox
    - 空白関係

      - skip(縦空白): \bigskip, \medskip, \smallskip, \vfill, \addvspace
      - break(最小縦空白): \smallbreak \medbreak \bigbreak
      - enskip(空白文字): \enskip \quad \qquad (実装済)
      - kern(文字間隔調整): \enspace (plain TeX) \thinspace (text mode) \negthinspace (text mode) (実装済)
      - 各空白の幅の定義値を調べて、既存の適当な幅を置き換える。見た目を確認する (指定した値がそのまま表示されるとは限らないので)。
      - [[What commands are there for horizontal spacing? - TeX - LaTeX Stack Exchange>http://tex.stackexchange.com/questions/74353/what-commands-are-there-for-horizontal-spacing]]
      - [[spacing - Lengths and when to use them - TeX - LaTeX Stack Exchange>http://tex.stackexchange.com/questions/41476/lengths-and-when-to-use-them]]
      - length?: \thinmuskip \medmuskip \thickmuskip \smallskip \medskip \bigskip

    - latex: \pagenumbering, \pagestyle, \thispagestyle, \flushbottom, \onecolumn, \twocolumn, \raggedbottom
    - latex/length.ctx

      - latex:length: \addtolength, \settodepth, \settoheight, \settowidth; \width, \height, \depth, \totalheight
      - latex:length: \topmargin, \headhight, \headsep, \topskip, \textheight, \footskip, \marginparpush,
        \oddsidemargin, \evensidemargin, \textwidth, \marginparsep, \marginparwidth, \columnsep, \columnseprule
      - コマンド引数: minipage の width, hspace の padding-right, 等を長さに置換,

    - latex:env: letter, quote, quotation, picture, tabbing, theorem, titlepage, verse
    - latex: \listoffigures, \listoftables, \abstractname, \bibname, \contentsname, \listfigurename, \listtablename


-------------------------------------------------------------------------------
  実装メモ - log
-------------------------------------------------------------------------------

2019-12-03

  * agh: ?version が agh.js に指定されていたら、
    他のスクリプトを要求する時も ?version を付加するべき。
    そうしないと部分的に古いファイルが使われて不整合が起こってしまう。
    →一応実装した。ちゃんと動作するか確認する。確認した。

2019-12-02

  * aghtex: アクセント記号の高さがずれている。
    これは hatenablog 特有の問題か、それとも Chrome の更新によるものか。
    →試すと普通に Chrome の仕様変更によるものの気がする。

    .aghtex-accent-symbol-accU を top: -0.35em から -0.22em に変えると大体良い。
    Fx では -0.25em 程度が良いだろうか。Cr でも 0.25 で良いかもしれない。
    IE も 0.25 にした方が良い。IE は \c の位置も修正する必要。
    小文字も同じ幅だけ修正すれば良いと思われる。

    vecU に関しては 0.05 だけ下に移動する。
    うーん。後で一つずつ調整する事にする。

    Note: もしかすると line-height: 1 を指定したのが関係しているかもしれない。
      だとすると他の文字 (日本語など) でもちゃんと動作するか確認する必要がある。
      →日本語の文字で試してみたら全然違う位置に表示される。
      日本語の文字を <tex:f> で囲んでみると逆にアクセントが下がりすぎる。
      具体的には元の設定 -0.35 で丁度良いぐらいである。

      或いは、aghtex の中身は全て line-height: 1 に強制しても良いのではないか。
      →それで動いている気がする。結局調整した。

    ブラウザ毎に調整するのは地獄なので Cr だけで調整する事にした。
    他のブラウザでは雰囲気的にあっていれば良いという事にする。

  * aghfly (hatena): $`` が効かない場合がある。$`` が ...$</span><code>... になっている。
    対応した。これの対応は簡単だった。

  * aghfly (hatena): 実際に変換が実施された時に credit を自動的に挿入する。
    簡単に対応した。

2019-12-01

  * aghtex: \sqrt の vertical-align は baseline にするべき。

  * aghtex: \begin{pmatrix} と \left...\right で高さが統一されていない。

    現在の実装ではそれぞれ独自に実装している。
    実装を統一した方が良い様に感じる。
    pmatrix (mod_array) の側では left,right の括弧も同じ行列の中で
    出力しているがそうすると margin-top, margin-bottom による調整ができない。
    もしくは、各セルに margin を消す要素を出力しなければならず汚い。
    そもそも現状でも colspan で縦に潰れるセルを採用していたりして汚い。

    また、現状で pmatrix の_^ にも対応していないという事に気づいた。
    →実際に確かめた。今回実装する事にする。


2019-11-30

  * aghtex: \left\right の括弧。上下に広がりすぎている。
    対策を入れてみた。これも暫くこれで使ってみて問題があれば修正する。

  * aghtex: table の要素の中に式番号のある式を入れると、
    式番号の為の余白を確保できなくて式番号が重なってしまう。

    →取り敢えず aghtex-eqno を出力する時に同時に
    ダミーの margin-right を設定した要素をその場に出力する事にした。
    本当は右側だけでなくて両側に設置したい様にも思ったが、
    式番号を除いてセンタリングしたければ右側だけに余白を設置するのが妥当である。
    取り敢えず実装が単純なので右側だけに空白を設置する事にした。

  * aghtex: tex:f に line-height:1 を設定すると良い気がする。
    試しに実行してみた。しばらく様子を見てみる事にする。

  * aghtex: CSS干渉対策 table → tex:table

    うーん。実際に hatena で表示してみた所、hatena に登録されている css
    で table td 等となっている物によって表示が乱されてしまう。
    これをどの様にして回避したら良いのだろうか…。

    うーん。<tex:table><tex:tbody><tex:tr><tex:td> 等として
    表示する事は可能だろうか。試しにこれで table を表示できるか試してみる事にする。
    取り敢えず Chrome では表示できるという事を確かめた。OK

    しなければならない事を整理する。

    * done: css で table になっている物を両方に対応できる様に書き換える。
      →結局 css className で全てを判定する様に書き換えた。
      →試しに実行してみる。問題なく表示できている様に見える。

    * done: table を出力している箇所を全て書き換える。
      特に table>tbody の形式を明示的に出力する事にする。
      書き換えた。diffを確認した。実行結果を確認した。
      取り敢えずこれで良しとする。

    取り敢えず現在のところは WebKit だけで修正を行っている。
    Fx でも動作確認した。Fx でも tex:* を使う事にした。

    →実際に動かしてみるとどうも変である。
      期待通りになるものとならない物がある。
      tex:table を table にするだけで正しく表示できる様になるので、
      問題は書き換えの失敗によって起こった物ではないと判断できる。

      うーん。colspan, rowspan, align が効いていない、ということか。
      調べてみると確かに tex:table を使っていると rowspan, colspan は使えないという事が話題になっている。
      https://qiita.com/yosukesannohe/items/b6eda6a7ce6cc9877266
      https://www.doe.co.jp/hp-tips/css3/css-table-display%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%A6%8B%E7%9B%B4%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/
      https://www.onenaught.com/posts/201/use-css-displaytable-for-layout
      https://stackoverflow.com/questions/9277661/colspan-rowspan-for-elements-whose-display-is-set-to-table-cell

    うーん。tex:table が使えないとなると他に方法はあるだろうか。
    巧妙に設定する事で何とか親ページのスタイルが適用されない様にしたい。

    a 例えば !important を全てに設定する? → style="" で指定する時に上書きできなくなる。
      style="" で指定するときにも全て !important をつけるという手もあるがそれは汚い。

    b 或いは優先度の高い CSS selector で上書きするか。
      これは元のウェブサイトがもっと強い設定をしていた場合に勝てないし、
      現在の class 指定による設定よりも強いと上書きされてしまう。

      と思ったが CSS の点数を見るとクラス属性による指定でない限りはそんなに強くない?
      と思ったが親要素にクラス指定があるとやはり駄目なのでは…。

    c うーん。親ページの table に対する指定で :not(.aghtex) という物を付加する?
      そして生成時には必ず class="aghtex" を含める様にする?

      然し、親ページのCSS指定を書き換える方法は果たして存在するのか…。
      どうも他のスクリプトによって生成された style sheet については、
      ルールを後で削除する事ができない様になっている気がする。

      何れにしても今後 aghtex を広める為には、親ページの CSS を変更してなんとかする、
      という方法は取りづらいのは確かである。という事を考えると、
      最終的には rowspan や colspan を使わずに実行する方法を考える事になるのだろうか。。
      然し…。うーん。全体を囲む () の場合には rowspan colspan は使わなくて良いが。。
      うーん。multicol だとかを実装するにはやはり rowspan colspan は必須である。

    要するに他から干渉されないルールを作成する為には。

    1 一つの table に一種類のセレクタしか適用されない様にする。
      複数のセレクタによって上書きされたりする設計になっていると、
      !important 等で強制させる事ができなくなってしまうので。
      或いは何がどうなっているのか分からなくなってしまう元である。

      うーん。然し。同じ詳細度のセレクタであれば複数あっても良いのでは?
      と思ったが。考えてみると何かの入れ子になっている場合には
      別の規則を適用する等のルールが色々ある気がする。
      それらを考え合わせると難しい。。。
      後 !important は style="" よりも優先されるのだろうか??
      なんと !important は style="" よりも優先される。。
      従って !important はまあ使えないなという感じがする。


      と思ったが、親ドキュメントが #content ... table の様に指定していたらどうなるのか。
      対抗する為には aghtex の側でも同様に何らかの id を設定するか、
      或いは !important を使うしかない。

      a id を設定するとしても CSS に記録する為には名前を一つ決めなければならない。
        という事は id は一か所にしか設定することができない。
          (実は複数個所に設定しても有効になるという説もあるが…
          やはり調べるとそういう状況はあってはならない事になっているので、
          振る舞いとしては規定されていない気がする。
          だとすれば今動いてもいつ動かなくなるか分からないので同じ id を複数の要素に指定する
          という事は考えない事にする。)
        そうすると html か body に設定しなければならないが、
        これらに既に親ページの側で別の id が付けられていた場合に困る。
        元々あった id を書き換えてしまってはやはり問題が発生する。

      b その様に考えると !important に頼るしかない気がしてくる。
        所で !important を適用した場合、子要素の属性への継承も強制される
        等という事はない…と思って良いだろうか。もしそうでないと !important は危険すぎて使う事ができない。
        →試してみたところ子要素は子要素でちゃんと自身に適用されるセレクタだけで決定する様だ。
        親の値が !important であっても強制的に inherit するという事はない。なので安心して良い。

      c 或いは親ドキュメントで #id を用いたセレクタで table の振る舞いが書き換えられている時は
        諦めるという手もある。もし完全に対応する事ができないのであれば中途半端なことをするよりは
        諦めた方がましなのである。

      取り敢えず table について !important で指定する事にした。
      指定が複雑になっているので整理する事にする。

      - aghtex-cmdleft-table
      - aghtex-array-table
      - aghtex-inline-table aghtex-sqrt-table
      - aghtex-underbrace-table
      - aghtex-frac-ie6-table (IE)
      - aghtex-sum-table
      - aghtex-inline-table
      - aghtex-inline-table aghtex-int-table
      - aghtex-toc-item-table

      display, white-space について確認する。
      IE だけ inline で他は inline-table。
      Op だけ nowrap を指定する。
      - cmdleft, inline, ie6, underbrace もそう。
      - sum は全て inline-table。 nowrap は指定しない。
        →これは IE だけ inline にして良い。
        Op も nowrap を指定して良い気がする。
      - array は nowrap を指定していない。と思ったら指定していた。
      - toc-item に関しては display も norwap も指定していないのである。

    * td についても調整する。
      - done: 取り敢えず TAG_TD を全て置換した。
      - done: 同時に inline css の !important と aghtex-css-td のクラス付加を行った。
      - done: 次に確認するべきは td に一緒につけられている className の収集。
        それぞれ他のタグには使われていない事を確認して明示的に td. を追加した。
      - done: td のついているルールが全て !important になっているか確認する。
      - done: td の既定のルールを追加する。
      - done: 無駄なルールを削除する
      - 既定のルールとして hatena が設定している物を上書きする。

    * done: span.aghtex-cmdleft-sup の類は tex:i に置き換える。

    * done: svg?
      position, left, top, width, height
      これは親ドキュメントで勝手に設定されるとは思えないが…。

    * done: tr: height visibility
    * done: table, tbody について TAG_TABLE, TAG_TBODY を削除する。

2018-02-06

  * 2016-06-10 aghfonts の取り込みとツール群の確認

    今迄どこからともなく手に入れた ttf2eot と sfnt2woff を使用していた。
    これらは可搬なプログラムなのだろうか。という事で検索してみる事にする。

    ttf2eot は元々 google codes の上で管理されていた様だが今は放置されている。
    代わりに github 上に clone を作っている人がいる。
    [[metaflop/ttf2eot: clone of https://code.google.com/p/ttf2eot/ with patch applied>https://github.com/metaflop/ttf2eot]]

    sfnt2woff に関しては firefox-3.6 に使われたコードを元にして簡単なツールが公開されている。
    [[WOFF fonts!>http://people.mozilla.org/~jkew/woff/]]
    [[TTF/OTFのフォントをWOFFに変換するツールsfnt2woff -- ぺけみさお>http://www.xmisao.com/2014/01/04/how-to-convert-ttf-to-woff-sfnt2woff.html]]
    [[[solved] How to create a .woff file with sfnt2woff under Linux [U|Ku|Xu|Lu]buntu from Gerard Talbot on 2013-02-24 (public-css-testsuite@w3.org from February 2013)>https://lists.w3.org/Archives/Public/public-css-testsuite/2013Feb/0083.html]]
    しかしここに公開されているのは 2009 年の物である。
    2014 年の記事でもここへのリンクが貼られているが、いつ消えてもおかしくないのではないかという気がする。危なげだ。
    何処かにダウンロードしておく必要があるだろう→ toos/ext/ で g add して repository に登録してしまう事にした。ソースコードのサイズは極めて小さい。

    追記: 2018-02-06 確認した所 sfnt2woff は予期した通り、消滅していた。README にその旨追記した。

2015-08-30

  * agh.regex.js 整理

    agh.regex.js の中で提供されている関数・クラスには以下のような物がある。

    | String.prototype.$replace; → 使っている人はいるのか疑問。削除or整理する。
    | // RegExp.prototype.countGroup; → 削除
    | RegExp.addFlags;
    | class agh.Text.MultiRegex
    |   register(regex,handler)
    |   replace_fast : 単純な複数一致
    |   replace_last : replace2 を利用した実装。途中で位置を変更できる
    | replace2
    |   replace2local
    |     何かバグがある様に見えるので修正を行う。というか実装途中??
    |     →修正した。
    |   replace2global
    |     これは agh.text.color.js の GlobalIndexibleReplace で再実装されている気がする。
    |     削除(または置き換え)予定である。

    取り敢えず agh.text.color.js にある機能を agh.regex.js に移動する方向で replace 機能を整理する。

    1 先ず初めに $replace 及び replace2 の使用箇所を特定し、依存性について確認する。
    2 $replace 及び replace2 を削除し、代替物に置き換える。
      簡単に代替物が見付からない場合には暫定的に残し後で削除する事にする。
    3 $replace, replace2 に代わる新しい関数を実装し agh.RegExp を介して公開する事にする。
      あるいは上記の replace2 を agh.RegExp に移動するという方向でも良い。

    使用箇所について確認を行う。$replace の使用箇所は以下の2箇所である。

    ./agh.regex.js:235:    return str.$replace(this.m_reg,function($G,$R){
    ./agh.text.color.js:78:    return str.$replace(this.mrx,this);

    agh.text.color.js に関しては単純に this.mrx.replace に置き換える事ができる。
    agh.regex.js の方についても this.m_reg instanceof RegExp なので replace2 に置き換える事ができる。
    replace2 に関しては agh.RegExp.indexibleReplace として公開する事にした。一旦 commit する事にする。

    次に indexibleReplace の replace2global を新しい実装 GlobalIndexibleReplace に変更したい。
    その為に先ずは API が一致しているかどうかを確認する。
    replace2global の handler の引数は ($G,$I) である。
    $G は exec の結果がそのまま入る。$I はメンバーとして regex, input, index, lastIndex, captures が指定される。
    GlobalIndexibleReplace の方も確認してみたが同じ様である。但し、$I に新しいメンバ handler が存在する。
    但し、GlobalIndexibleReplace は $I.regex の変更がそれ以降の置換に反映されるという所が異なる。
    しかしながら regex を変更する様な事は行っていないはずなので大丈夫だと思われる。
    検索したら RegexConverter#switchContext という関数の中で regex/handler を設定するコードがあったが、、
    これは GlobalIndexibleReplace を使う前提でのコードであって replace2global の為のコードではない。

    replace2local についても GlobalIndeibleReplace に合わせて拡張を行った。LocalIndexibleReplace と名称を変更する。
    また、agh.text.color.js の GlobalReplace についても agh.regex.js の agh.RegExp.replace に移動する事にした。
    GlobalReplace に関しては start,end の範囲の指定はできない。
    (これに対応しようとすると indexibleReplace と同様に複雑になる。それならば indexibleReplace を呼べばよい。
    もともと GlobalReplace を用意したのはわざわざ indexibleReplace の様な複雑な事をしなくても良い場合の為であった。
    その場合は実の所、単純に String#replace を呼び出せば良いが、
    使い方を indexibleReplace と統一する為の wrapper として GlobalReplace がある。)
