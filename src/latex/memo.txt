
Ageha Javascript Library - agh.LaTeX - memo.txt


------------------------------------------------------------------------------
  Memo
------------------------------------------------------------------------------

実装上の留意点・意識すると良い事、または便利な情報をここに記述する。

  * css versions

    currentColor: Fx38 Cr31 IE9 Sf8 Op32

  * フォント一覧

    [bB]igg? 括弧類

      aghtex_mathrm   固有の括弧(default)
      aghtex_mathbf   固有の括弧(太字)
      aghtex_mathfrak 固有の括弧(frak)
      aghtex_mathit   固有の括弧(斜体)
      aghtex_mathbb   big
      aghtex_mathscr  Big
      aghtex_mathbm   bigg
      aghtex_mathcal  Bigg

  * フォント出所

    mathbb (Diamond, Join, Box): type1/bluesky/lasy10.pfb
    mathit (数字の斜体): type1/bluesky/cmti10.pfb (mathit-1.1.5)


------------------------------------------------------------------------------
  ToDo
------------------------------------------------------------------------------

問題点・改善点・新機能の計画などについての議論をここに記述する。

2018-02-05

  * ReadDimension true unit / \magnification

    https://tex.stackexchange.com/questions/319508/what-is-the-difference-between-truemm-and-mm-etc
    取り敢えず true を parse するようにはした。

    \magnification には対応していない。
    実のところ \magnification は他の様々なところに影響を与えるものなので、対応するべきかどうかは微妙である。
    一部にしか影響は及ばないものの飾りとして対応するというのでも良いかもしれない。

  * twocolumns

    これは実は対応できる気がしてきた。CSS の column-count: 2; を使うと一応出来るが
    ページの概念がないので縦長になって読みにくいという問題があった。
    しかし、これについては章毎に twocolumns を指定すれば多少良くなるだろう。
    また、実際に印刷をしてみると (少なくとも Chrome では)、
    ちゃんと、頁毎に column 分割をしてくれるようだ。

    しかし、そういった構造に対応する為には、

    1 \begin{document} トップレベルで現在の context
      (hmode の開始・終了 ページの開始・終了) を管理する必要がある。
      現在の文脈に関するオブジェクトを管理する仕組みは既にある。
      これが既存のコードでどのように使われているか調べて、
      その性質について考察しながら実装の可能性について探る必要がある。

    2 また、{...} で囲んだだけでこれらが無効になるのも妙なので、
      これらについても適切に処理する必要がある。

    3 更に、ボックス内部で同様の制御を行う可能性についても考える必要がある。
      例えば minipage のようなものでは内部でやはり vmode, hmode を使えると良いだろう。
      逆に、何らかの引き数などのときには vmode, hmode は無効にして、
      その時には \par は <br/> として出力するなどの動作の変更も必要になる。
      無効のときの noindent の振る舞いについても考える (単に無視で良い?)。

      或いは、初めに \par が現れた瞬間に vmode が有効な文脈に変身するという実装でも良いかもしれない。
      それより以前の内容については <p></p> で囲まれないことになるが、まあそんなものだろう。
      (LaTeX において、引き数などの内部で \par が現れた時にどの様に処理しているかも確認したほうが良いかもしれない)



2018-02-04

  * \today コマンド

    cls_article.ctx に getDateStringOfToday という関数があるが現在は使われていない。
    getDateString も含めて別のモジュールに関数を移動して、
    cls_article.ctx ではそのモジュールから import した関数で実装を行うのが良い。

    よく考えてみると実は \today コマンドであっても document.lastModified を使うべきの気もする。
    何故なら \today が \today である事に意味があるのは、
    実際に PDF や DVI に変換を実行するのが最終的なドキュメントの作成日だからである。
    しかし、.tex のままで表示できるということになると、
    実際に発行するという動作を経ず閲覧日が変換日になる。
    そもそも閲覧日を表示しても何の意味もない。
    代わりに最終的な発行日として最後にファイルを変更した日を表示するのが自然である。

  * \count の対応?

    LaTeX Counter と plain-TeX \count はどうやら色々使い方が異なる。
    mod:length の \the は plain-TeX の \count に対応している。

  * Counter \theCounterName に対応?

    LaTeX Counter は \theCounterName の形でその値を出力することができる。

  * global/local Counter

    現在の実装だと {} で囲まれた章の番号は外に影響を与えないのでは? 要確認。
    章番号はグローバルな値に影響を与えるべきである。
    一方で、\item などによる番号の増加は外に影響を与えないほうが自然である。

  * \if...

    実は \if 系統だけ実装してしまえば、
    ループなどの機能は既存の枠組みで自動的に動くような気がする。
    \iftrue, \iffalse の実装はそれぞれ同じレベルにある
    (skipSpaceAndCommentMacroExpanded で?) \else, \fi までを読み取れば良い。

    然し…raw の読み取りで skipSpaceAndCommentMacroExpanded を使うと、
    結局、元の LaTeX と同じように \protect などが必要になって始末が悪い。
    仕方がないので、raw 読み取りの時でも skipSpaceAndCommentMacroExpanded は使わずに読み取る。
    このことから来る制限として \else \fi のエイリアスは \let を用いる必要があるということ。
    \def でエイリアスを作ると認識されない。

2018-02-03

  * \hdotsfor by background-image: radial-gradient() が印刷されない。

    Chrome において、背景を印刷するにしても、印刷画面では点線が表示されるが、
    実際に PDF に出力してみると消えている。
    background-image: url(.svg) だとちゃんと印刷されているようなので、
    簡単な黒い円が一個だけの SVG を作って、それで表示するべきなのではないか。

    後弄っていて気付いたのは、radial-gradient の色として currentColor を使っているが、
    Chrome では文字色を動的に変更しても点線の色はそれに追随して変化しないということである。
    Ctrl+Wheel で描画サイズを変更するなどしないと反映されない。

    一方で、background-image: url(.svg) に関しては、ちゃんと追随して色が変更される。
    と思ったが 2015-10-31 の記録を見るとやはり追随して変化しないのかもしれない。
    後で改めて確認が必要である。

2018-02-01

  * 制限: <length> は現在 plus/minus も読み取っているが、
    現状では plus/minus を使って表示を調整するコードは書いていない。

  * 制限: 面倒なので以下のコマンドの単語がマクロで分断されている場合には対応しない。
    "\hbox to <dimension>" の "to"
    "\length = <dimension> plus <dimension> minus <dimension>" の "plus" と "minus"

  * http://memopad.bitter.jp/web/mathjax/TeXSyntax.html
    http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm
    ここに MathJax の対応しているコマンドの一覧が載っている。

  * 2018-02-01 Lengths https://en.wikibooks.org/wiki/LaTeX/Lengths

    - 2018-02-04 \settowidth は対応した。
    - 2018-02-04 \the も対応した。

    - \newdimen / \newskip / \newmuskip に対応する。
      実は \newlength は既存のコマンドを上書きしないように内部でチェックをする \newskip である様だ。
      https://tex.stackexchange.com/questions/22863/what-are-the-differences-between-newdimen-newskip-and-newlength
      \newlength の上書きチェックについても対応する必要がある。


    - 各種の既定 Lengths について定義を行う。
      取り敢えずは適当な値で良い。例えば、A4 を仮定するなど。
      (但し、印刷する時に問題になるかもしれないが…)。

    と思ったら vh vw などという単位が CSS には存在しているようだ。
    https://developer.mozilla.org/ja/docs/Web/CSS/Length
    例えば 0.5\paperwidth に対しては

      `calc(0.5 * var(--aghtex-paper-width, 50vw))`

    などとすれば良いだろうか。しかし、それだと様々な計算ができなくなる。
    一方で、絶対指定にするとウィンドウのサイズを変更した時に追随できない。

  * http://www.math.kobe-u.ac.jp/HOME/kodama/tips-latex-math-margin.html
    http://surgery.matrix.jp/comp/tex/plain/plain09.html
    レイアウト関連のコマンド

  * mod:length (ns.Document#ReadDimension):
    \dimen整数 の読み取りには対応していない。
    これについては先ずは ReadInteger などの実装が必要になる。
    また \dimen コマンドかどうかの判定を行う必要がある。
    更にその為には \dimen コマンドを実装してある必要がある。

  * mod:length: \dimen123
  * mod:length: \dimen123 = dimension の形式に対応する

2018-01-31

  * \noindent

  * https://hal.inria.fr/file/index/docid/662674/filename/Fayolle-IPPI-50.tex

    cls:paper, pkg:hyperref, pkg:amsthm (env:proof, \newtheoremstyle, \theoremstyle)
    \thanks \and \rule \protect \newblock

  * \pacs \address \acknowledgments

2017-07-19

  * http://swn1.com/fir.tex このファイルで変換できていないものに対応する。 #tmp0001

    \usepackage{amstex}
      http://www.verycomputer.com/18_3517fcaedefc7bf6_1.htm によると、
      昔は amsmath は amstex というパッケージ名だったらしい。

      対応した。

    \operatorname
      これは既に operatornamewithlimits というコマンドを実装しているようなので、
      単にそれを多少修正して登録するだけなのではないか。

      2018-01-30 \operatorname, \operatorname* に対応した。

    \mod
      ソースコード中の "mod:common.*" などの文字列と被っていて検索しにくいが、
      多分対応していない。

      他に \pmod, \bmod などがある。

      MathJax のページによると \mod#1 の時には
        display-math [18mu]mod[2thinspace]#1
        inline-math  [12mu]mod[2thinspace]#1
      \pmod#1 の時には
        display-math [18mu](mod[6mu]#1)
        inline-math  [8mu](mod[6mu]#1)
      という様なスペースの空け方になっているらしい。

      因みに 18mu = 1em で 2\thinspace = 2/6 em = 6mu の様だ。

    \thispagestyle
      取り敢えず引数は取る様にする。対応していなくても。

      これは各ページのページ番号やヘッダ・フッタの配置を指定するものである。
      章の最初のページだけ形式を変更するなどの場合に用いられる。
      HTML の場合にはそもそもページの概念がないのでどう対応するかは謎。
      印刷時のヘッダ・フッタについては CSS で制御できるかもしれない。
      後で調べると良い。

2015-11-03

  * accent t,f だけ特別扱いする?

    t はアクセントの位置が微妙に高すぎる。
    f はアクセントの位置をもう少し右に移動したい
    (尾が左に出ている為、アクセントが左に引きずられているのだろう)。

2015-11-02

  * \underset, \overset

    位置調整・左右余白の調整。

  * 根号・伸縮括弧の表示方法について

    他の記号についても svg 化を行う。
    1 stretch_{u,d,ud}arr{,2}.svg, stretch_{slash,bslash}.svg を作成する。
      stretch_symbols.sfd 上で作成してそれを svg として出力すればよい。
    2 className を決めて登録する。

2015-11-01

  * CreateAccentCommandQksB (IE6, IE7) の廃止。CreateAccentCommand と同様の実装に切り替え。

    今迄の経験に従うと CreateAccentCommandQksB を使ったアクセントを sqrt や frac の分母に入れると、
    高さが潰れてしまうなどの問題が生じる。単に CreateAccentCommand の実装に移行すれば良いだけと予想される。

    書き換え手順:
    0. 問題が生じるかどうか確認する。
    1. CreateAccentCommand の実装に移行して問題が生じないかテストする。
    2. CreateAccentCommand に切り替える。

  * [保留] Opera の既定の印刷設定で、伸縮括弧が印刷されない。

    base.ctx (function stretchImg): case "Op": 及び default: にて、
    伸縮括弧を background-image:url(...) で表示しているが、背景は既定で印刷されない。
    WebKit (Cr/Sf) 以外では背景の印刷を強制する方法がない。

    そもそも Opera のレンダリングエンジンは既に使用されていないので
    これは大きな問題にはならない。保留とする。

  * 根号・伸縮括弧の表示方法について

    現在 svg を用いる方法を Fx/Cr/Sf で試験的に利用している。

    ToDo: Cr/Sf で旧来のコード (aghtex-stretch-bg 関連) を削除する。

    各伸縮括弧の表示方式の利点と欠点

    - <img src=".png"/> を用いる方法 (現在: IE/Fx-qks, (png) Fx-std)
    - background-image:url(.png) を用いる方法 (現在: Op, (png) Cr/Sf)
      x 印刷でぎざぎざが見える。
      x 文字色が反映されない

    - <img src=".svg"/> を用いる方法
      x 文字色が反映されない

    - background-image:url(.svg) を用いる方法
      x 文字色が反映されない
      x コピー時の文字情報を埋め込めない

    - mask を用いる方法
      x ぎざぎざが見える。
      x Cr/Sf でしか使えない。
      x コピー時の文字情報を埋め込めない

    - <svg> を用いる方法 (現在: Fx-std/Cr/Sf)
      x 出力する html が長くなる。
      x コピー時の文字情報を埋め込めない

2015-10-31

  * \overline: math mode でしか使えない筈だが mod_common.ctx でグローバルに定義されている。

  * Old memo.txt (このファイルの後半にある) の整理を行う

  * [保留] Chrome で動的に color (CSS) を変更した時に \sqrt の棒の色が更新されない。


------------------------------------------------------------------------------
  Done
------------------------------------------------------------------------------

終了した ToDo 及び関連する議論はここに残す。

2018-05-30

* aghfonts: \big 括弧の配置場所について 2013-11-07 09:02:18

  | と、ここで大弧の類を symbols の変体に設定しようとしたら、
  | mathfrak に既に fraktur 版の []()/ の記号が入っていた。
  | 考えてみたら、[]()/\{} の記号は ASCII 領域にあるので被る。
  | mathit の []()/\{} のスロットを使う場合もイタリックな物を本来其処に入れたい物。
  | 
  | * mathit には symbol の変体は入れない (symbol の標準形のイタリック版が入るべき)
  | 
  |   mathbb に関しては、元々 bb 体自体が記号的な物で、
  |   また、他の記号類に対しても同様の bb 体を用意するという事も考えにくいので問題にならなかった。
  |   同様に mathcal や mathscr に代入する事自体もそれ程問題にはならないと考える。
  |   mathfrak についても、fraktur 版の記号が既に其処に存在しているという事がなければ問題はなかっただろう。
  |   ただ、mathit に関してのみは将来的に「イタリック体」として使いたいという可能性を考慮に入れて、
  |   symbols の変体の類を勝手に代入するという事はしない様にしたい。
  | 
  | * 全角字形の方に入れる?
  | 
  |   ASCII で mathfrak に既に存在している物と被ってしまう事が問題になっていた。
  |   それならば変体などの記号類は全角形の方に定義してしまうと言うのも手である。
  |   幸いにして全角形が使用される事は (海外では) 殆どない。
  | 
  |   しかし、問題点としてはスラッシュ・バックスラッシュの形が、
  |   全角と半角で著しく異なる事である。全角にすると傾きが 45 度になってしまう。
  |   (括弧の類については、全角にしても、
  |   「横に 2 倍になって正方形に近い括弧になった」等という事はないのだが。)
  |   スラッシュ・バックスラッシュだけが問題だというのであれば、
  |   スラッシュ・バックスラッシュ類の他の unicode ポイントを探して、
  |   其処にデータを保持する様にすれば良い。
  | 
  |   がしかし、バックスラッシュに対応するポイントは少ない。
  |   u5c (backslash) か u2216 (set minus), u20E5 (combining backslash),
  |   uff3c (全角 backslash),
  | 
  | * 或いは変則的な割り当てについてちゃんと記録を残して mathit 等を汚染する?
  | 
  |   現状の mathit がどの様に mathit に相応しくない記号類と混じり合っているかについて、
  |   ちゃんと記録に残しておけば混ざり合わせても良い様な気もする。
  |   (しかし、それでも []()/\{} のイタリック版は確かに字形として既に存在している…。)
  | 
  | 2018-05-30 改めてこれについて議論したい。
  | 
  | 先ずそもそも何処に大きなカッコがあるのかという問題がある。
  | 探してみると cmsy9.sfd の中に3セット入っているという事が分かった。
  | 
  | 次に何処に格納するかという事を決める必要がある。
  | 上で議論した様に既存の math?? には既に色々文字が入っていたりする。
  | 改めて確認する事にする。
  | 
  | aghtex_mathrm ... ローマン。  固有の括弧
  | aghtex_mathbf ... 太字。      固有の括弧
  | aghtex_mathfrak ... 亀甲文字。固有の括弧
  | aghtex_mathit ... イタリック。固有の括弧
  | 
  | aghtex_mathbb ... 黒板体。実は既に大きな括弧が格納されている。
  |                   ASCII 及び ceil, floor 2308-230b にある。
  |                   langle rangle がないのはどういう事だろう。
  | aghtex_mathcal ... ない。今後もなさそう。
  | 
  | aghtex_mathbm ... イタリック太字。
  | 
  | 亀甲文字に含まれている括弧は他の括弧と同じだったりしないのだろうか。
  | →確認してみたところ固有の括弧である。端の曲がり方が異なる。
  | 
  | mathbb に入っているのは何だろう。
  | これは調べてみたところ確かに big である。
  | 今、ちゃんと以下の順で幅が狭くなっていっている。
  | 
  |   mathrm括弧 > mathbb括弧 > cmsy9(1) > cmsy9(2) > cmsy9(3)
  | 
  | 次に mathbb の langle rangle は何処に消えたのか?
  | どうも見当たらない。消滅したのだろうか。Unicode を調べてみると以下にある。
  | 
  | 2329-232a left/right-pointing angle bracket
  | 27E8-27E9 mathematical left/right angle bracket
  | 3008-3009 (CJK) left/right angle bracket
  | 
  | 見つかった。CJK left/right angle bracket の領域にあった。
  | よく考えたらデフォルトでこれを使うようにしているので、
  | ここに文字がないと使えないのである。

  規則。

  1. 文字自体の切り替えは行わずフォントだけで切り替える。
  2. つまり4種類の新規括弧を4種類の異なるフォントに配置する必要がある。
      現在の所、空いているフォントは以下しかない。他は固有の括弧が存在する。

      mathbb/mathcal/mathbm

  3. 配置について

    () [] {} /\ については ASCII 範囲
    U+2308-230b ceil, floor
    U+3008-3009 〈〉

  まとめ。

    aghtex_mathrm   固有の括弧(default)
    aghtex_mathbf   固有の括弧
    aghtex_mathfrak 固有の括弧
    aghtex_mathit   固有の括弧
    aghtex_mathbb   big
    aghtex_mathscr  Big (todo)
    aghtex_mathbm   bigg (todo)
    aghtex_mathcal  Bigg (todo)

  多分、先に太らせた字体を作ってから各太さに対して配置するのが良い。
  太らせ方については P18.2 に書かれている。

  * 縦棒はどうするのだろうか。

    もし字体が何処にも用意されていなければ対応しない。
    他にも矢印など色々ある。幾つか確かめる。
    これは cmsy9.sfd には含まれていなかった。
    他のも探してみたが見つからなかった。
    従って、現状では対応しない事にする。

  * 後、字体に空白が含まれている気がする。

    理想的には、字体に対応している物については空白は付加しない。
    字体に対応していない物については空白は付加する。
    しかし面倒なので対応しなくても良い気もする。
    字体に対応していなかったとしても、
    フォントによって余分の空白を付加した方が良かったりしない方が良かったりしそう。

    →これは margin-right で調整する事にした。

  * フォントの切り替えについて。

    丁度 .aghtex-lbrace, .aghtex-rbrace が7セットあるので
    それに対してフォントを指定すれば良い。
    後、/ と \ は別に指定する。

    →結局、一つ一つ aghtex-big-variant を付加する事にした。
      対応している文字についてこの class を指定する。

  実装した。動いている。

2018-02-05

  * aghtex4chrome で # 付きでファイルが開かれた時、 [#D0035]
    変換が完了した時点で該当位置に移動するようにしたい。

    % これは実は DOMContentLoaded より前に変換を実行できれば問題ないかもしれない。
    % と、思ったがよく考えたら変換を非同期で行っているので、
    % 恐らくどんなに頑張っても DOMContentLoaded より前に完成できることを保証はできない。
    % 従って、どの状況でも正しく動作するために結局対策は必要となると思われる。

    変換が完了したときに移動するようにした。
    window.location.hash に値を代入することで移動するらしいが、
    実際に試してみると値が変わらない場合には何も起こらない。
    一旦 window.location.hash = "" にしてから、
    再度値を代入するというようにすれば一応動くが、
    一瞬だけページ先頭に移動するので無駄にちらつきが発生する。
    結局 a 要素を作成して a.href に値を設定して a.click() を呼び出すことにした。
    動いている。代入した瞬間に a.click() すると描画が整った時にずれたりするが、
    見たところそんなにずれないようなので良しとすることにする。

    - 序でで、HTML ファイルらしきものを誤って aghtex4chrome で開いてしまった様子の時、
      HTML として表示するようにリダイレクトする様に判定を書き加えた。
      実際にやってみると一応は動いている (が DOMContentLoaded までに時間がかかって、
      その後で内容の判定を行うので遅い)。

  * 2018-02-04 aghtex4chrome でドキュメントの日付が background.html の日付になる。 [#D0034]
    これは document.lastModified を background.html の中で実行しているのが原因である。
    正しく処理するためには

    1 先ず初めに ns.Document に対して外部から lastModified を指定できるようにする必要がある。
    2 aghtex4chrome の受け渡しで lastModified も受け渡す様にする必要がある。

    これについては Document#option という変数を用意して、
    そこに外部からの設定項目を書き込むということにした。

    後は、aghtex.js の tex_transform の第三引き数 option にオブジェクトを渡すことにした。
    (コードを見ていると元々は option は文字列で指定することを意図していたようだが、
    実際には何処からも使用されていなかったので役割を変更した。)
    tex_transform から呼び出される tex_modes["full_texview"].transform の中で
    doc.option.lastModified に値を設定する。

  * 2018-01-31 伸縮チルダが変になっている: $\widetilde{C[T]}$。 [#D0033]

    SVG として埋め込むことにした。
    然し、高さが大きくて見た目が悪い。
    実際に出力に使っているコードは output_overbrace であり、
    高さは overbrace と同じものを用いている。
    しかし、\widetilde や \widehat はそれよりも低いほうが自然である。
    class を付加する様にして widehat/widetilde の時は高さを変える様にした。

    x done: 然し、現状では <img> で埋め込んでいるが、currentColor が反映されない。
      currentColor が反映されるためには <svg> で埋め込む必要がある。
      これは直した。

    \underbrace/\overbrace なども全て SVG が使える時には使う様に変更した。
    また \underbrace/\overbrace 周りのコードも整理した。

2018-02-04

  * 2018-01-31 \ref で出力される section 番号の後に空白が入っている。 [#D0032]
    x done: 更にローマ数字の 10 が "I" になっている。
      これは直した。数字を切り出す位置が反転していた。

  * 2018-02-02 array の p{長さ} で一列定義されるはずなのに、唯の既存の列にたいする幅指定と解釈されている。 [#D0031]
    どうやら p{...} の時には alignment は l の様である。

    x done: しかもよく観察してみると p で指定した幅が実際の表示に反映されていない。
      実装を見ると p で読み取った幅を col().width に設定して、
      更に Cell#get_width で参照するようにしているが、
      この get_width を使っている箇所が何処にもない。

      →取り敢えず各セルを出力する際に width を設定するようにした。

    一列定義するようにするのは単に setter.setAlign('l') を指定するだけのようだった。
    さて、もしかすると 'r' や 'c' で指定する文法もあるのかもしれないと思って検索してみたが、
    以下のページを見る限りはそのような物はないようだ。
    https://tex.stackexchange.com/questions/52246/how-can-i-left-justify-a-paragraph-cell-in-a-table

    \raggedright などをどうやって実装したら良いのかは分からないが、
    取り敢えず >{} や <{} の対応は現在はしていないので気にしないことにする。

    また、p{...} の ... の読み取りを ReadDimension (#D) で実行することにした。

  * \fbox の class が誤っていて枠線が表示されていなかったのを修正した [#D0031]

  * \settowidth: aghtex4chrome 環境でちゃんと動作するのだろうか? [#D0030]

    →試してみた所ちゃんと動いている様だ。
    また、\settowidth の計算で一部間違っているところが見つかったので修正した。

  * 2018-02-01 length に関連して \the コマンドというものもある。 [#D0029]

    https://tex.stackexchange.com/questions/38674/the-the-command

    現在の実装では \the は length/dimension にしか対応していない。
    mod_counter.ctx では LaTeX の counter にしか対応していないので、
    plain-TeX count の様に \the\counterName で出力できるものではない。
    plain-TeX 形式の count に対応するときに \the もそれに対応すれば良い。

    取り敢えず count の事は考えない。length (dimen/skip) に対して対応した。

  * 2018-02-02 二重 \hline の間の間隔が潰れている。 [#D0028]
    height/width の解釈 (border を含むか含まないか) を CSS で設定できたのでは。
    →box-sizing である。これを content-box にしたらブラウザ依存性もなくなるのでは?
    と思ったが、よく考えたら content-box は既定値である。それなのに何故
    セルが潰れてしまうのかは謎である。これはまた後で色々試す必要がある。

    →改めて試してみたところ潰れていない。何故だろう?
    もしかすると Firefox だと潰れていたということかもしれない。
    いや、違う Chrome の中で潰れるときと潰れないときがあるようだ。

    一応 box-sizing:border-box;height:2px; にしたら
    どちらの場合でも期待する描画結果になったが、
    そもそも何故違いが出たのか不明である。

    或いは中に <tex:i style="height: 1px; display: inline-block;"></tex:i>
    なる要素を入れても良い様だ。IE 向けのコードではこれをやっている。
    →結局 IE に対する対策と同様にすることにした。
    ブラウザに依存しないコードで同じ見た目にすることができるので。

  * 2018-02-03 latex/test のコンパイルを自動化する。 [#D0027]
    一時ディレクトリを使ってコンパイルする。
    -output-directory=... は platex 及び pdflatex は対応している。

    これは実装してみたが、tex 環境によって入っている documentclass が異なったり、
    日本語が認識できたりできなかったり、フォントが入っていたりいなかったりして
    コンパイルできなくなっているファイルが多すぎて駄目だ。やはり TeX は駄目だ。

  * 2018-02-03 \mathbb{C} の色が固定になっている。 [#D0026]

    結局 text-shadow を用いて中抜きにする方法だと難しそうだ。

    -webkit-text-stroke を用いて中抜きにする方法を用いることにした。
    昔試した時には Chrome と Safari で比較して、
    Chrome ではよく見えないとして棄却したが、
    改めて観察してみて Chrome では綺麗ではないが耐えられないという事もない様に思われたので。

    また、text-shadow を用いた時も --aghtex-color が指定されている時にはそれを用いる様にした。
    同時に pkg:color では color を指定すると同時に --aghtex-color も設定する。

  * 2018-02-03 何と CSS で変数を使える機能があるようだ。 [#D0025]

    https://stackoverflow.com/questions/1875852/how-can-i-define-colors-as-variables-in-css
    http://jsfiddle.net/Z4VWc/1/
    https://developer.mozilla.org/ja/docs/Web/CSS/var

    しかもある要素で指定すればそこより下にある要素に適用される。
    これを使えば黒以外の文字色の場合にも対応できるし、
    フォントの設定なども入れ子になっている場合でも大丈夫なように設計できるかもしれない。

    しかし、これができるくらいであれば、var(color) 的なものがあっても良いと思うのだが…。

    % と思って var(--color) としてみたら、何と文字色を指定することができた…。
    % しかし、Web を探してもこの動作については記述がない。
    % うーん。https://drafts.csswg.org/css-variables/#using-variables を見ると、
    % --color と color を別のものとして取り扱っている例が見られる。
    % ということは、Chrome の var(--color) で color に触れる動作は非標準的なものだろう。
    % というか var(color) でアクセス出来ないのが悪いのである…。
    %
    % 改めて試してみた所 --color は動作しなかった。
    % 実は jsFiddle が --color を定義していただけなのではあるまいか。
    % しかし、だとしたらどのようにして --color を color を追跡する値にしたのだろう。
    % そう考えるとやはり何か方法があるのかもしれない。
    %
    % うーん。改めて jsfiddle に行って試すが不思議だ。以下は動かない。
    %
    % border-bottom: 1px solid var(--color);
    % border-bottom-color: var(--color);
    %
    % 以下のようにすると動く。
    %
    % border-bottom: 1px solid black;
    % border-bottom-color: var(--color);
    %
    % どうやら以下のように完全に分けて書けば動くようだ。
    % border-bottom-width: 1px;
    % border-bottom-style: solid;
    % border-bottom-color: var(--color);
    %
    % と思ったら、実は color を指定しなければ既定で border-color は color の様だ。
    % つまり、var(--color) は解釈されなくて fallback として color が使われていただけだったのだ。
    % 現に var(--color) 以外の var(--sssss) などでも同様に動作する。

    また SVG で表示している根号や括弧なども color と同じ色にするためには、
    SVG の中でも var() で色を指定できるのかどうか確認する必要がある。
    と思ったが、試してみたら既にそのように動作している。
    fill="currentColor" とするだけで現在の color と同じ色で描画してくれる様だ。

    寧ろ CSS でも currentColor で指定できて欲しいものだ…
    と思って Chrome で試してみたら認識している。
    調べたら比較的最近実装されたようである。

      http://am-yu.net/2015/02/11/currentcolor/
      http://chibinowa.net/note/web/css-current-color.html

    MDN で確認してみると実は Chrome では v1 から既に対応していた様だ。
    IE でも 9 以降で実装している。もっと早く気付いておくべきだった。

      https://developer.mozilla.org/ja/docs/Web/CSS/color_value#currentColor_keyword

    と思って latex.pp.css を確認したら既に currentColor を使って指定されていた…。
    color:black などと指定しているのは

    - mathbb-shadow

      color を上書きしているので currentColor にできない。外側の要素の currentColor が知りたいのである。
      しかし、入れ子にして外側で shadow を指定して、内側で color を変更すれば行けるかもしれない
      しかし、それでもアルファベットに関しては shadow ではなくフォントで表示する様に変えている所で、
      外側の要素の currentColor を取得する必要があるのである。
      実は、これこそ --aghtex-mathbb-color: currentColor; として
      内側で var(--aghtex-mathbb-color) とすれば良いのではなかろうか。

      →やってみたが駄目だった。"currentColor" という値が --aghtex-mathbb-color に設定されるだけの様だ。
      うーん。結局 var(--aghtex-color) などに頼るしか無いのだろうか。
      取り敢えず pkg:color では color を指定するとともに --aghtex-color も指定するようにした。
      これにより一応は pkg:color を通した着色の場合には mathbb-shadow でも正しく色がつく様になった。

      しかし、結局 text-stroke を用いて中抜きの文字を表示することにした。
      -webkit-text-stroke / -webkit-text-fill-color を用いれば
      color を上書きすることなく描画色を変更できる。
      また拡大した時の形状も見やすい。

    - .aghtex-array-cell{border-color:black;}
      これは単に $"borderColor" に置き換えれば良い気がする…
      と思ったが、$"borderColor" は IE/Op で空文字列に展開されるので
      少し異なる切り替え方をする必要がある。

      % 因みに、これが他の border と独立に指定されている理由は、
      % 恐らく table 内部の要素に対しても border-color を継承させるためである?
      % →と思ったが、それは変である。black と決め打ちしたら継承できない。
      % 何も指定しないほうがましである。

      →これは何も考えずに border-color:currentColor; で良い気がする。
      というのももし currentColor を認識できなければ、既定の設定になるからである。

    - hdots の gradient の色
      これは将来的には SVG に置き換えるかもしれないが、
      現時点で変更しておいて問題はないように思われる。
      また IE9 以下に対しては、そもそも border-color を指定しなければ既定の色で描画されるはず?

      →radial-gradient の色を currentColor にした。

    - また他に気付いたのは、td.tex-bd-* は記述はあるが何処からも使用されていない。

      grc '\bbd\b' とすると何処にも使われていないという事が明らかである。
      →全体的に class を整理した。全ての class について "aghtex-" prefix に変更した。

  * 2018-02-02 日付は現在時刻ではなくて document.lastModified を使えるのではないか。 [#D0024]

    document.lastModified の形式はブラウザによって色々の様である。
    例えば https://developer.mozilla.org/ja/docs/Web/API/Document/lastModified では、

      Tuesday, July 10, 2001 10:19:42

    という形式が例に挙げられている。Chrome のコンソールで試すと、

      07/09/2002 01:11:15

    という形式になっている。試しに new Date("上記の二種類の形式") でやってみたところ、
    どちらの形式でも正しく解釈できている様だ。ブラウザの document.lastModified は、
    自身の new Date でちゃんと解釈できると仮定すればこれをそのまま使える。

    より任意の形式に対応できる様に手で実装することはできるかもしれないが、
    際限がないし面倒なので其処までは対応しない。
    さて、解釈に失敗したときにはどのようになるだろうか。
    試してみると

      new Date("").getTime() === NaN

    になるようである。或いは、date.getTime() === 0 ということもあるかもしれない。
    これらの可能性を除外するためには、

      var date = new Date(document.lastModified);
      if (!(date.getTime() > 0)) date = new Date; // date.getTime() may be NaN

    などとして、失敗した時には現在時刻を返す様にすれば良い。

    実装した。と思ったが aghtex4chrome では反映されていない。
    よく考えたら当たり前である。変換を実行しているのは別のページなのだから。
    これについては別項目を立てて処理することにする。

  * 2017-07-19 \\[引数] (used in http://swn1.com/fir.tex) [#D0023]
    
    上記のファイルでは使用されていないが、他のファイルで変な文字列が残る。

    2018-02-01 対応した。

    2018-02-03 実は、配列環境の \\ でも同様に引き数で高さを指定することができる様だ。
    但し、これについては \hline 等との兼ね合いを調べて慎重に実装しなければならない。
    (新しい行を挿入するのか、前の行に padding を入れるのか、次の行に padding を入れるのか。
    padding を入れるとしたら全てのセルに共通の padding を入れるべきかなどなど。)

    platex で試してみると \hline の直前に vskip が入る様である。
    hline を複数指定してもこれは変わらない。
    セルの padding で高さを確保するのだとしたら全ての要素に padding を入れる必要がある。
    例えば、中身の高さの小さなセルにだけ padding を入れると実質見た目に変化がなくなる。

    どの様に実現するかについてだが…。

    a 一つの方法は全てのセルに padding-bottom を入れるという事。
    b もう一つの方法は新しい行を入れる方法。

    新しい行を入れる方法の場合は罫線がある場合を考えると、
    縦罫線も再現する様に改めてセルたちを出力しなければならない。
    また、multicolumn が設定されている時にはどの様に振る舞うのかも調べなければならない。
    →調べてみると multicolumn で設定された罫線がそのまま下に伸びるようである。
      つまり、各セルについて padding-bottom が設定されていると考えて問題ないように思う。

    具体的にどう実装するかについて。振る舞いとして a の方が実装が楽である。
    b でも実現できないことはないが面倒である。
    実装は多少汚い気もするが、絶対指定で高さを指定する時点で何れにしても、
    inline style を指定する必要は出てくるのだから、取り敢えず a を採用する。

    - ok: 今の実装を見ていて気になったのだが、
      実は \hline を一番上に二個以上設定すると、全ての行に \hline が表示されるのでは?

      →試してみるとちゃんと重複して表示されるというようなことは起こっていない。何故だろう。
      と思ってよく見たら、write_bT を呼び出しているのは、
      各行の直前ではなくて、何れの行の出力を行うよりも前の一番最初だけだった。

    或る行に含まれる全ての cell に同じ描画属性を与えるにはどうしたら良いだろう。
    調べてみると、現状ではそのような機能はないように見える。
    \hline の場合には Table で borderH という配列を保持していて、
    getHorizontalLines() を使ってアクセスしている。
    "行" を表現するオブジェクトの配列、といったものは存在しないようである。

    a 一つの方法は borderH を真似て Table#paddingBottom の配列を作る。
    b もう一つの方法は Table#lines.paddingB という物を作る。
    c 或いは、各セルに Cell#paddingB を保持させて、
      \cline と同様に一つ一つ paddingB を設定していく。

    思うに共通の paddingB (vskip) と各セルの paddingB は区別した方が良い気がする。
    という訳なので、c ではなく a または b を用いて実現する。
    Table#borderH という形にしたのは、hline は各行に属するというよりは、
    行と行の間に属するからであった。
    padding に関して言えば、明らかに行に属するものなので、
    これは Table#lines のようなメンバを追加しても良いように思われる。

    b で実装した。OK。動いている。

2018-02-03

  * 2017-07-19 \hdotsfor (used in http://swn1.com/fir.tex) [#D0022]

    #tmp0001 の子項目

    | これの対応は難しい。

    | td{vertical-align:middle;}
    | td>tex\:i{display:block;border:0.3em dotted black;height:0;}
    |
    | などにすれば良いのでは。
    | しかし、左右で点が密集した感じになる。
    | また、点の間隔を制御する方法は与えられているのだろうか。
    | と思って検索してみたら何か出てきた。
    |
    | http://blog.funxion.jp/139/
    | https://stackoverflow.com/questions/6250394/how-to-increase-space-between-dotted-border-dots
    | https://jsfiddle.net/yyp67pbg/
    |
    | ここに載っている方法だと点は四角くなってしまう。少しいじってみたら丸くするのも簡単だった。
    |
    | td{
    |   background-image: radial-gradient(0.3em, black 50%, transparent 50%);
    |   background-position: center;
    |   background-size: 0.6em 0.3em;
    |   background-repeat: repeat-x;
    | }

    取り敢えずは実装できた。

    幾つか疑問点があるので試してみる事にする: 201802-hdotsfor.tex

    - done: 本来は hdotsfor は amsmath がないと動かないはず。
      また tabular でも動くのかどうかを確かめる必要がある。

      →そのままでは \begin{array} では使えなかった。
      \usepackage{amsmath} したら \begin{array} でも使える様になった。
      それでも \begin{tabular} では使えなかった。

      実装としては、doc.context_cast("...").OverwriteContext を使うか、
      もしくはその場でコマンドを追加するという方法を用いるのが良さそうである。
      単一のコマンドなので寧ろそちらの方が良いかもしれない。

      そのまま doc.context_cast("env.array").AddCommandHandler("hdotsfor", ...); を用いる事にした。
      動いている。

    - done: \hdotsfor を指定した時点で既にセル内容があるときの振る舞いは?
      更に \hdotsfor を指定した後に内容を追記した時の振る舞いは?

      →\hdotsfor より前に内容があるとエラーになる。
      \hdotsfor より後の内容は右寄せで表示される。
      点線は内容の左余白だけに表示される。
      実は、点線の縦位置は baseline に同じ。

      現在の実装では \multicolumn でも \hdots でも、
      既に内容がある場合でも何もエラーは発生しない。
      これらについてはエラーを出力するべきなのではないか。
      →エラーを出力する様に変更した。

      また、内容を重複して指定した時、hdots と内容が異なる行に表示されている。
      これは position: absolute; にして hdots が内容の配置に影響を与えない様に修正したい。
      と思ったが、これだと縦位置の調整ができない。
      position:absolute をして何も top, bottom, right, left を指定しない場合は、
      position:static と同様に他の要素を押しのけてしまう様である。
      と思ったがそういう訳でもないようだ。要素を挿入する順序の問題の様だ。

      点線を表示するための要素を先に挿入したら問題はなくなった。
      また、位置が padding によらない様に、left:0 も指定した。
      点線が表示される高さ (縦位置) も height を調整することでできるようだ。
      問題なく表示されている。

    - done: 左右の border の振る舞いは?

      | 右側の border は消える。複数本あっても 0 本になる。
      | multicolumn によって新しく設定することはできる。
      |
      | 現在の実装はどうなっていただろうか。
      | border を個別に消すことはできるが、
      | 逆に border を消す操作と border を作る操作が conflict した時はどうなったろうか。
      |
      | % 現在の実装を調べてみる。先ず、各列の既定値については Table#borderV に格納されていて、
      | % 更に Column#borderL 及び Column#borderR を通してアクセスできる。
      | % ある列の borderR と次の列の borderL は同じインスタンスになっている。
      | の様になっていると見せかけて実は borderV は何にも利用されていなかった。
      | 使われていないだけでなく、最初に空の配列で初期化されるだけで中に要素も作られない。
      |
      | うーん。結局 Column#borderL 及び borderR は最初に罫線を指定する時に初期化される様だ。
      | 初期化しているのは add_bL 及び add_bR のみであり、add_bL/add_bR に罫線が設定されるのは、
      | TableAlignSetter#setBorder のみである。他に add_bR に [extra column] エラーメッセージが
      | 設定されるが、これは例外的な使用方法なので今は考えなくても良い。
      | そして TableAlignSetter#setBorder では、
      | 一番左の罫線を設定する時は第一列の borderL を使うが、
      | それ以外は必ず borderR に登録する様である。
      |
      | この動作は hdotsfor で右側の罫線が消えるということと、
      | \multicolumn で再度線を設定することができるということと、整合している。
      | つまり、hdotsfor はセルの右側の罫線を削除する。
      | 一方で \multicolumn はセルの両側に罫線を設定する。
      |
      | もう少し確認する。もしこれが正しいのだとすると、
      | \multicolumn で定義される左側の罫線は、
      | \multicolumn の左にあるセルの右側の罫線と独立に処理されるはず。
      | つまり、罫線が追加される or 左側の罫線は multicolumn で削除できない。
      | →実際に試してみると左側の罫線は multicolumn で削除できないというのは正しかった。
      |   但し、罫線が追加されるということはない。正確にいうと multicolumn の左側の一番最初の罫線は、
      |   左側のセルの一番右側の罫線と同じ位置になるので一見して増えない。
      |   しかし、multicolumn の左側の二つ目以降の罫線は実際に追加されて表示される。
      | →この様な複雑な振る舞いを再現できているのかどうか、と思って確認してみた所、
      |   現在の実装では厳密にこれらの振る舞いを再現できている様だ。
      | →しかし、そうすると今度は multicolumn が一番左側にある時には違いが出るのでは、
      |   と思って実際に試してみるとちゃんと実際の LaTeX の振る舞いを再現できている。
      |   つまり、実際の LaTeX もこの実装と同じ様な処理を起こっている、
      |   つまり、一番左の罫線は一番左の列が担当し、
      |   それ以外の罫線はその左側にある列が担当するという形になっている。
      |   multicolumn は multicolumn を構成する一番左の列の borderL と、
      |   一番右の列の borderR を用いて実装される。
      |   或るセルの borderR の一番右の罫線と、次のセルの borderL
      |   の一番左の罫線は同じ位置に描画されるので、くっついて見える。

      実際の実装でも現在の実装でも以下のように array の罫線は管理・構成されていると思われる。

      - 全体に共通の縦罫線は、(複数本あったとしても) 各セルの borderR に設定される。
      - 但し、一番左の縦罫線に関しては、一番左のセルの borderL に設定される。
      - \multicolumn を実行すると結合セルに含まれるの一番左のセルの borderL と、
        一番右のセルの borderR が上書きされる。特に何も罫線をしていしない場合は
        borderL/borderR は空になる。
      - 描画の際には或るセルの borderR の一番右の罫線と、
        その次のセルの borderL の一番左の罫線は同じ位置に描画される。
        (もしくは HTML の場合には border-collapse でくっついている。)
      - \hdotsfor#1 は \multicolumn{#1}{r}{...} と等価の気がする。

      これは set_hdots で set_multicol と同様に borderL, borderR を設定するだけで良い。

    - unchanged: もう一つ気付いたことは multicolumn の後に続けて内容を記述すると、
      内容が付加されるということ。振る舞いを見ると hdotsfor の時と同じ。

      もう少し調べてみる。
      multicolumn/hdotsfor の追加内容は親の align に関係なく右 align の様だ。
      また math mode コマンドは使えない。直立体。
      paragraph mode の ~ は無視される。つまり、paragraph mode でもない。

      現在の実装を調べてみると multicolumn に関しては、
      後に続けて入力した内容についてはセルの中にちゃんと入る。
      但し、math mode になっていて align は multicolumn に指定したものになっている。
      つまり前回実装した時に全て調べた上で現在の実装になっている気がする。
      現在の振る舞いについては変更しないことにする。

    - done: multicolumn/hdotsfor を二重に設定すると何が起こるのか?

      実際に LaTeX で試すとエラーになる。
      現在の aghtex の実装だとエラーは出ずに、
      最初に指定した方の内容が表示される。
      しかし、それだけで済んでいるはずがない。
      内部で変なことになっている気がする。

      何れにしても何処かでエラーを検出する必要がある。

2018-02-01

  * 2015-11-01 \stackrel 実装見直し。 [#D0021]

    | 現在の実装だと CreateAccentCommandQksT と同様に
    | sqrt/frac の中に於いた時に高さが変になる(特に IE6 で)などの問題が起こると予想される。
    | CreateAccentCommand と同じ実装方法に変更する必要がある。
    |
    | 0. 問題が生じるかどうか確認する。

    これは #D0020 の対応で再実装した。
    IE8 未満については一応昔の実装を残したが、
    現状において IE7 の様な古いブラウザでどうなっても知らないので気にしない事にする。

  * 2015-11-02 \mathop, \stackrel, \overbrace, \underset 統一。 [#D0020]

    \underset, \overset を \overbrace, \underbrace の仕組みで実装した。
    しかしながら既に似たような事を \mathop や \stackrel でも行っている。
    個別に実装を行って個別にテストを行うのは非効率である。
    これらの実装を統一する事を考えたい。

    2018-01-30 \mathop については対応した。

    2018-02-01 \stackrel も inline-block を使った実装に切り替えた。

  * mod:length: \\[...] [#D0019]

  * mod:length: Length の対応 [#D0018]

    \hbox に対応する前に先ずは Length の読み取りに対応することにする。
    取り敢えず Document#ReadDimension 関数を実装した。
    実は \hbox は length 指定ではなくて dimension 指定にしか対応していないようなので、
    取り敢えずこの時点で hbox の実装をして良い気がする。

    実際に試した見たところうまく動かない。
    どうやら数字も SCAN_WT_TXT として読み取られる様である。
    但し小数点だけは SCAN_WT_LTR である。書き直しになる。

    % というかよく考えたら scanner の方で弄れば良いのではないか?
    % と思ったがマクロなども考えると、やはり分割して読み取った方が良いだろうか。
    % 数字や単位を途中でマクロで分断することができるか試す必要がある。
    % →試してみた所マクロで分断することができるようだ。
    %   つまり、scanner で一回で数値を読み取るという具合にするのは難しい。
    %   マクロを展開しながら処理する必要があるので Document 側で読み取る必要がある。
    % →但し、そうだとしても scanner の設定を変更して、
    %   数字・小数点と単位の文字列をそれぞれできるだけ1回で読み取るように変更することは可能だろうか。
    %   これは、一度解析した単語を再度解析する必要が生じるので面倒である。
    %
    %   - つまり、dimension を読み取り始める前に既に次の単語を読み取った状態になっているので、
    %     その既に読み取った単語については scanner の通常の区切りで読み取られてしまっている。
    %     これに対処する為には一度解析した単語を書き戻して再度解析するか、
    %     または通常の区切りでも、専用の区切りでもどちらでも解析するようにするかすれば良い。
    %   - 更に、dimension を読み取り終わった後に次の解析に進むはずであるが、
    %     その解析の際には scanner の通常の解析で読み取った単語を用いる。
    %     つまり、dimension の読み取りにおいては一番最後の有効な単語の次は、
    %     通常の解析方法で this.scanner.Next() しなければならない。
    %     しかし、ある単語が dimension の最後の単語であるという事を、
    %     次の単語を見るまでは事前に判定することができない (特に dimension の指定の仕方を誤っているとき)。
    %     従って、この場合についても再解析が必要になる。
    %
    % この様に考えると scanner に特別な単語区切りを実装するのは汚くなる。
    % 現状のまま、scanner で読み取られた SCAN_WT_TXT, SCAN_WT_LTR を切り取りながら解析する方法で行く。

    取り敢えず \hbox で必要な範囲で対応した。動いている。

    | * mod:length: ReadLength ... dimension plus dimension minus dimension
    | * mod:length: \length = length の形式に対応する

    plus/minus 付きのものについても実装した。
    lengthHandler と dimensionHandler を作成して、
    それぞれ ReadLength/ReadDimension で = の右辺を読むように変えた。

  * \hbox に対応する。 [#D0017]

    \hbox の仕様について調べる必要がある。
    少なくとも \hbox to length {} と \hbox {} の二つの形式がある。
    試してみると \hbox の次の非空白の単語は to または { のどちらかでなければならないようだ。
    また "to 長さ" の直後に { がなければならない。
    "長さ" の部分は "数値 単位" や "数値 \length" などの形で長さとして妥当なものでなければならない。

    長さの読み取りの関数としては mod_length に ns.Length.ParseDimen という関数がある。
    しかし、これは読み取りの関数ではなくて文字列から解釈する関数である。
    長さの読み取りの関数は一から作る必要がある。LaTeX における長さの指定はどのような形式があるだろう。

    - 0.1cm
    - 0.5\textwidth
    - \textwidth

    ※長さコマンド以外が来るとエラーになる。
    ※存在しない単位だとエラーになる。
    ※符号は指定できる。符号と数値の間、数値と単位の間には空白類を挟める。他は挟めない。
    ※単位の前には数値が必要。符号だけでは駄目。長さコマンドの前は符号だけでも良い。
    ※実は、\textwidth などの他に \dimen数字 でも OK。
      dimen と数字の間に空白があっても OK。更に数字はマクロで展開された物でも OK。
    ※\textwidth や \dimen についてはマクロで展開した結果にそれになるというのでも OK。
      というか実は to 0.5\textwidth など全てがマクロに入っていたとしても OK。

    https://en.wikibooks.org/wiki/LaTeX/Lengths によると以下の 2 形式しかないことになっている。

    - 3.5pt plus 1pt minus 2pt
    - 1.7\textwidth

    plus の後に更に plus を加えたり、plus/minus の順番が逆だったりしても良いのだろうか。
    と思ったら hbox の引き数には plus/minus は指定できない。
    つまり単純な長さ指定と、複雑な長さ指定の二種類があるということだろうか。
    複雑な長さ指定の仕様に関しては後で調べる必要がある。

    複雑な長さ指定に関して。
    試してみると plus ... が来てから minus ... という具合に順番も決まっている様だ。
    minus が最初に来ても良いが、その後に plus を加えることはできない。
    また minus/plus はそれぞれ重複して指定することはできない。
    plus ... 及び minus ... の ... 部には 0.01\textwidth なども指定できる。

    つまり、以下のような構文になっている気がする。

    <simple-length>
        := <sign>_opt <number> <unit>
        |  <sign>_opt <number>_opt <length-command>

    <length>
        := <length> [plus <length>]_opt [minus <length>]_opt

    調べてみると、殆どの場所では <simple length> しか受け付けていない気がする。

    - \hbox to ... {} は <simple-length> だった。
    - \\[...] も <simple-length> であった。


2016-01-19

  * tex-xmlns.txt の内容 [#D0016]

    > tex:abc   数式中のアルファベット (イタリック)
    >   .l        英小文字
    >   .u        英大文字
    > tex:in    上付・下付文字の内容コンテナ
    >   .t        上付文字
    >   .tt       table を使用した上付文字
    >   .tb       table を使用した下付文字
    >   .it       積分記号の上付文字
    >   .ib       積分記号の下付文字

    元々は xml schema だか何だかを作成する為に作った一覧表だが、
    時間が経って内容が最新でないので無効とする。
    (特に class 名は、現在はページに指定されている
    class 名と被らないように長いものに置き換えられている。)


2015-11-03

  * aghfonts (mathbb-1.1.26): u25b3 (bigtriangleup), u25bd (bigtriangledown), u25cb (bigcirc) (3x3 glyphs). [#D0015]

  * 数字のフォント [#D0014]

    数字の斜体は cmti10 に入っている様だ。
    数字及び記号の類を cmti10 から mathit に移植した。

  * pkg_ams.ctx (pkg:latexsym): symb フォントを使用する。 [#D0013]

    恐らく多くの記号は既に aghfont に含まれている。確認をしてただフォントの指定を切り替えるだけのはずである。
    →確認をした全て基本的な図形は含まれていた。aghfonts を多少弄った。

    同時に \cdot のフォントについても対応した。

  * aghfonts (pkg:latexsym): Box Join の文字を mathbb に入れる事にした。 [#D0012]

    Box Join 等の文字は type1/bluesky/lasy10.pfb に含まれていた。
    これらのフォントのライセンスは SIL Open Font License (OFL) である。曰く:
    Effective with the AMSFonts 3.0 distribution, all Type 1 fonts are released under
    the SIL Open Font License [http://scripts.sil.org/OFL].

  * aghfonts: mathrm hinting 修正。mathbb-1.1.25: Modify u25a1 (Box). Add u22c8 (Join) u25c7 (Diamond) [#D0011]

    mathrm, mathbb: hinting 修正について

      fontforge-2013v を使用したらヒンティング関係が壊れた。
      fontforge-2012 を使用して再度ヒンティングを実行すれば直る様なのでそうする。

    mathbb: Box は lasy10.pfb に入っている物を使うべきであったので修正する。

      Join (lasy10) は mathrm/u22c8 と同じだろうか?
      →確認したらやはり大きさが違う。lasy10/Join は mathbb/u22c8 に入れる事にした。
        もっと見ると Diamond についても大きさが違う様である。

      この修正で mathbb-1.1.25 とする。

2015-11-02

  * 根号・伸縮括弧の表示方法について[<svg> による方法を Cr にも適用] [#D0010]

    % 現在 svg を用いる方法を Fx で試験的に利用している。
    % もしこの方法が安定して使えると判断できるのであれば Cr でもこの方法の採用を検討する。
    →Fx で良好なので Cr でも試してみた。印刷時も期待通りに表示されている。

    注意: Fx では伸縮括弧を正しく配置する為に position:absolute を使用しているが、他のブラウザでは不要と思われる。
      具体的には、td{position:relative;width:hoge;} td>svg{position:absolute;left:0;top:0;} となっている指定は全て不要である。
    →Cr で実際に試してみた所、Cr でも position:absolute にしないと高さが変になるという事が分かった。
      Cr でも Fx と同様にしたら良好な表示である。但し、Cr は Fx よりも中身の高さが小さくなる傾向があるので、
      伸縮括弧の幅を多少小さくする事にする。

2015-11-01

  * 根号などの伸縮記号についても color を反映させる方法について。 [#D0009]

    過去の考察については情報や知識が古いが、多少参照する。

    > P17. 伸縮記号の色
    >   現在の実装だと、伸縮する記号は全て .png を用いて表示されている。そして、常に黒色で表示される。
    >   背景を黒色にして前景色を白にしている環境では、黒色で表示すると何も見えない。
    >   前景色に合わせて表示する色を変えるにはどうしたら良いだろうか。
    >
    >   a.画像を表示する時に何らかの effect を用いて着色する。
    >     IE では filter を使えばこれは可能。
    >     他のブラウザの場合は不明。別のレイヤーを被せる事で何とかできるか?
    >
    >   b.その場で png を生成して base64 で encode する
    >     IE 以外のブラウザでは data スキームを使う事が出来るので、
    >     その場で表示したい色の png を生成して url(data:*) に入れるというのも手である。
    >
    >     但し、この場合には html を生成した後に、文字色を動的に変更しても反映されないという問題が残る。
    >     (でも、良く考えたら、これは IE の filter を用いたとしても同様に問題になるのでは?)
    >     因みに、border を使って表示している角括弧の類も、現状では黒で表示されている気がする。
    >
    >   c.SVG で生成する
    >     その場で対応する色を持った SVG を表示する。
    >     (SVG で表示する時は、外部で使われている文字色を中に取り込む事が出来ただろうか?)
    >
    >   d.フォント?
    >     フォントの中にある文字を伸縮して表示する事が出来れば、前景色の問題などは一切起こらない。
    >     然し、縦横に自由に伸縮する文字の表示の仕方というのは全然聞かない。
    >
    >     transform を使って何とか出来るか? → transform の関数は基本的に単位を受け付けない
    >     (元の大きさに対する倍率)。つまり、100% 等を用いて親要素の大きさに合わせる事は出来ない。
    >
    >   どうも、動的な前景色の変更を正しく反映する様にするのは難しい。
    >   その方法は「文字」として表示する方法しかないが、
    >   文字を枠に合わせて伸縮させるという方法は知らない。
    >   それならば諦めて、前景色を指定したい時には生成時に明示的に指定する様にするというので良いかも知れない。
    >   \usepackage{color} すれば \color{色名} というコマンドがあって、前景色を指定できる。
    >   前景色を変更したい場合には、この \color{色名} コマンドを指定して貰う事にすれば良い。
    >
    >   color.sty の機能を実装する。 [完]

    現状に於ける表示方法の選択肢として以下の物を考察する。

    a どうやら CSS 上では現在の color の値を指し示す値として currentColor という物を使える様だ。
      と思って stretch_sqrt.svg の色を確認してみた所既に currentColor になっていた。
      しかし、currentColor は背景として指定している場合には反映されない様だ。
      調べてみたが、外部の currentColor を参照する方法は用意されていないように見える。

    b 一方で表示画像の内容に対して filter をかけて色を置き換えるという手もある?
      調べてみた所 css に filter は追加されたようだが、特定の色だけ置き換えるという filter は無いようだ。
      つまりこの方法は実現不能という事である。

      また filter をかけてしまうとラスタ形式になってしまい印刷した時にぎざぎざになる。
      どちらにしても余り好ましくない。

    c 或いはまた別の方法として mask を使うという手もある様だ。
      background-color で要素を塗り潰しておいて
      .svg を用いてそれを mask して切り抜くという形である。

      -webkit-mask: url(stretch_sqrt.svg) no-repeat 100% 100%;
      -webkit-mask-size: cover;

      やってみたら意外と簡単に望み通りの結果を実現できてしまった。
      しかし印刷してみるとラスタ形式になってしまっているという事が分かる。
      また Chrome の描画の都合なのか、mask にすると縁が微妙に mask されずに残り無駄な線が入る様だ。
      この方法もやはり微妙なので様子見する事にする。

      →印刷さえしなければこの方法でも良いのではないか?
        しかし画面で見ている時は色が反映される様に見せかけておいて
        いざ印刷してみると色が反映されていないというのも問題なのではないだろうか。

        通常は背景色は既定で印刷されないが、背景色も印刷する設定になっていると問題になる。
        そういえば黒地に白文字のページは印刷時に問題にならないのだろうか。。。
        と思ったら背景を印刷しない時にはちゃんと文字の最高輝度の制限が掛かる様である。
        従って薄い灰色で印刷されて一応読めるようにはなる様だ。
        しかしもう少し試してみたら currentColor を用いて文字色を引用して表示している線などには
        最高輝度が効かず、そのまま白色で印刷される―つまり見えなくなる―様である。

      x Chrome/Safari にしか mask, mask-image は存在しない様だ。
        Firefox にも mask: という css property はあるようだが、サイズを指定できない様だ。
        また、期待通りに mask できていない? 使い方が異なるのだろうか。

    d svg 要素を直接埋め込んで処理する方法?

      背景画像の .svg に fill="currentColor" を指定しても意味がなかった。
      親ドキュメントの文字色は継承しないようであった。
      <img src=".svg" /> で指定してもやはり親ドキュメントの文字色は継承されない。

      一方で svg 要素を直接埋め込む様にすると currentColor で文字色を期待通りに参照できる様だ。
      というかもうこれで良いのでは?

      取り敢えず Fx で対応を試みる:

        Fx では正しい高さになる様にする為に工夫が必要である:
          td{position:relative;width:2ex;height:100%;}
          svg{position:absolute;width:2ex;height:100%;left:0;top:0;}

        sqrt の場合は微妙に位置の調整を行う: left:0.2px;top:-1px;

        何やら普通に動作している様子である。
        印刷しても滑らかである。外部で指定した color と同じ色で記号が表示・印刷される。

      img の alt と同様に、コピーした時の文字列情報を埋め込みたい。
      しかし Fx で aria-label="" や <title> 子要素を試してみたが両者ともコピー時の文字列には反映されない様だ。

    取り敢えず svg 要素を直接埋め込む方法で Fx において良好に動作しているので一旦整理する事にする。

  * IE8 で上付アクセントの位置が変である。 [#D0008]

    改めて見てみるが変という事はないように見える。
    何かの拍子で変になって見えたのか、色々修正している内に直ったのか。
    取り敢えず解決済という事にする。

  * 現在伸縮括弧(\left \right \sqrt)の模様を一部のブラウザで背景画像として表示している。 [#D0007]
    背景画像として表示する場合 CSS だけで切替が可能なので、ブラウザ毎に構造を変更しなくて済む。
    一方で、多くのブラウザでは印刷時に背景は既定で省略する設定になっているので、
    わざわざ手で背景を on にしないと期待通りの印刷をする事ができない。

    と思ったら -webkit-print-color-adjust: exact という CSS Property がわざわざ存在している様だ…。
    しかし Fx や IE など他のブラウザでは対応する css property は用意されていない。
    幸い background-image を用いて表示を行っている箇所は現在のところ主に Cr/Sf のみである。

    後は、base.ctx (function stretchImg) で
    Opera 及び "その他のブラウザ" でも同様の実装を行っているが、
    Opera の元々のレンダリングエンジンは今や使われていないので、
    余り気にしなくても良いように思われる。
    "その他のブラウザ" はそもそも現在は存在していないはずである。
    →これらの問題点は保留として残す事にする。

  * 実は border-color の指定を省略した時はその要素の color (文字色) を用いて描画される筈だとか。 [#D0006]

    →Fx Cr IE8 IE6 で確認。何れに於いても期待通りに文字色が採用される様だ。

    更にいうならば文字色と同じ色を使用するという意味の色指定 currentColor という物もある様だ。
    但し IE6 などの古いブラウザで対応しているかどうかについては怪しい。
    調べた所 IE9 以降でしか currentColor は対応していない様である。
    currentColor: Fx38 Cr31 IE9 Sf8 Op32

    取り敢えず既存の border の指定から black (border-color) の指定を消してみた。
    普通に動いている様に見える。
    但し、Chrome に関しては既定で table{border-color:grey} という指定がある様で指定なしだとうまく行かない。
    table.aghtex-inline, etc{border-color:inherit;border-color:currentColor;} 等と指定しても変わらない。
    謎である。Chrome では明示的に solid currentColor 等と指定する必要があるのかもしれない。

    可成り面倒であるが…一応明示的に currentColor と書く様に変更を行った。
    しかしそれでも思うように動作しない。border-color の値を弄ったりすると反映される。
    その後で color を弄ったりしても即座には反映されず、次に border-color の値を弄った時に初めて反映される。
    どうやら Chrome は currentColor を指定しても、color の値が変更されるたびに更新がされる訳ではなく、
    最後にその currentColor を評価したタイミングの時の color の値が使用される様である?
    (ただこれが起こるのは table td の時だけのようでもある。
    他の要素の場合には color が変更されると同時に border-color の値も更新されて見える。)

    逆に初めからページの色がその様になっている場合には問題ないのだろうか…?
    →問題なかった。つまり、Chrome では途中で勝手に文字色が変わった時に
      sqrt の棒の色がそれに追随しない事があるという事になる。
      これは Chrome の問題であるし、また、この様な状況は余りないと思われるので保留でよい。

  * latex/latex.pp.css (accents): IE7 workaround, IE7 以下では display:inline-block を用いた空白付加を行わない。 [#D0005]

    実際に試してみた所、全然効果がない。CSS がそもそも適用されていない様だ…。
    と思っていたらそもそもアクセントの実現方法が IE6 では異なるのであった。
    改めて確かめてみるとやはり qks または IE8 未満では表示方法が異なる様だった。
    詳細はすぐみても分からないが結構無理のある表示方法だったように思うから、
    表示が変になってしまうのも無理はないだろう。

    改めて最新のアクセント表示の方法 (position:absolute を用いた方法) が IE でどの様になるのか確認する。
    →なんと期待通りに表示されている…。
    確かに使っているのは position:absolute 関係の CSS だけで
    IE6 での実装が怪しくなりそうな機能は使っていない。

    CreateAccentCommand に移行する事に決定した。移行した。CreateAccentQksT は廃止する。

2015-10-31

  * アクセント上部のスペース [#D0004]

    現在アクセントは position:absolute で表示しているのでその高さは配置に全く影響を与えない。
    これは例えば inline での配置において行の高さを変えないという点に置いては利点であるが、
    分数の分母に持ってきた時や根号の中に持ってきた時などに上にある描画物と重なってしまい問題である。
    行の高さが乱れてしまうのは許容して、アクセントを使用する時には上に余白を付加する様にした方がよいと考える。

    実現方法として

    a. aghtex-accent で display:inline-block;padding-top:0.2em などとする?

      display:inline-block にするのは padding-top が働くようにする為である。
      padding-top を付加した事によってアクセント (position:absolute;left:0;top:0;) の位置が変わる。
      従って、同時にアクセントの縦位置 top について -0.2em をしなければならない。

      x 実際に Fx と Cr で試してみたがブラウザによって微妙に配置の高さに差異が出る様である。
        つまりブラウザ毎に縦位置の修正量を調整する必要がある。

      x また、accent を inline-block に変えてしまう事による副作用がないか慎重になる必要がある。

      x この方法だと IE の古い version などで inline-block の高さ合わせが期待通りにならない?
        (baseline で合わせたい所だが IE6 の inline-block の vertical-align で baseline が動くか不明)

      他の方法についても考えてから決定した方が良い様に思われる。

    b. aghtex-accent で display:inline-block;margin-top:0.2em などとする?

      padding-top だと中身のアクセント記号の position:absolute 原点に影響を与えてしまう。
      一方で margin-top にしておけば中身の原点に影響を与えずに済む。
      つまり、アクセントの縦位置の修正・微調整は不要という事になる。

      margin-top の場合にも display:inline-block は必要である。
      vertical-align:baseline は既定値なのでわざわざ指定する必要はない。

      + \sqrt や分数の場合には問題はないようだ。

      + \overline の場合は display:inline-block にしないと
        正しく margin を使った線の配置にならない様だ。
        \overline に display:inline-block を附記する。

      他にも問題になるコマンドが存在するかもしれないが、
      それらについて個別に対応する事にする。

    b の方法で安定的に (既存部分に大きな影響を与えずに) 対応可能な様なので、

  * \int_{...} の位置調整。 [#D0003]

  * \overline の線の位置が変である。 [#D0002]

    → \overline, \underline の線は text-decoration ではなく border として描画する様に変更。

    \overline を使用した時一本の線が上部表示される事を期待するが、
    今迄の実装では text-decoration:overline を用いていた為に、
    各文字の上に線が引かれるという状態になっていた。
    これだと様々な高さの文字が混在している場合に線ががたがたに分裂したり、
    overline 内部に分数があった場合などに棒が分子分母それぞれに対して引かれたりする。
    これは期待した動作ではないので、text-decoration ではなく
    border-top を用いて線を引くように変更する。

    border-top を用いることによる問題点は線の色を文字の色に合わせることができないという事である。
    しかしこれは仕方がないので保留とする。

    所で、TeX には元々 text-decoration:overline に相当するような、
    各文字の上に線を引くという機能は存在しないのだろうか?

    b. \underline についても同様に分数にした時に線が分裂してしまうなどの問題が生じそうである。

      既存の text-decoration による実装の問題点について確認する:

      o 文字の高さが異なる時でも baseline の方は位置が合っている筈なので、線ががたがたになったりする事は無い。
      x しかし、margin 等の空白がある場合に線がそこで切れる事になる。
      x 分数など中に構造がある時に全体に対して一本線が引かれるのではなく、各要素について下線が引かれる。

      というか本来の TeX の \underline の動作はどの様な物であったか?
      素直に考えるとやはり内部に構造があったとしても全体に対して下線が引かれるという形になっているはずである。
      CSS でいう text-decoration は寧ろ TeX では自体やフォントの問題であって \overline や \underline
      等の構造を記述するコマンドはその様な事はしないのである。
      従って、underline に関しても border-bottom を用いた実装に変更しても良いかも知れない。

      % x しかしながら問題点は border-bottom を用いると baseline の位置ではなくて、
      %   領域の一番下の端に線が引かれてしまうということである。
      %   疑問: 元々の LaTeX の \underline はやはり baseline の位置に線を引く物であったか?
      %   →実際に試してみた所 ''\underline は baseline の位置に線を引く物ではなく'' 全体の下に下線を引く物であった。
      %     特に中身の高さに応じて位置が変化するという事も確認できた。

      →寧ろ text-decoration:underline ではなくて border-bottom で対応する必要がある。

2015-10-31

  * 古い memo.txt の内容について概観と整理を行う。 [#D0001]

    古い memo.txt では ToDo に関してカテゴリー分けして管理していた。
    また、完了済の項目についてもそのカテゴリー内に記述を残していた。
    (現在のように細かいカテゴリー分けはせずに、
    また、完了済の項目はできるだけ早く log に送ってしまう方が良いと改めて考える。)

    古い memo.txt 内のカテゴリーは 計画(P), 不具合(B) などの種類(P, B)に番号を付加して管理していた。
    以下がそのカテゴリーの一覧である。

    P00. 細々とした事
    P01. verbatim の実装
    P02. 目次や参照文献や数式番号の実装
    P03. \def パターンマッチング
    P04. Command からの GetArgument 呼び出しの再考
    P05. CSS ファイルの読込に関して
    P06. 特別記号の熟語
    P07. 行末の %
    P08. flatten で context performance に期待
    P09. アクセント記号類に関して
    P10. \left\right
    P11. ドキュメントのクローン
    P12. array の類の実装をもう一度やり直したい
    P13. Scanner の再設計
    P13.1 整理 [完 2009/07/28]
    P13.2 \makeatletter, \makeatother
    P13. Scanner の再設計
    P13.1 整理 [完 2009/07/28]
    P14. Command 再考
    P15. コマンドの対応
    P16. フォント埋込計画
    P17. 伸縮記号の色
    P18. 自作記号フォント
    P18.1 Font 作成ソフトに関し
    P18.2 字体
    P18.3 ディセンダ・アセンダ
    P18.4 フォントヒンティング
    P18.5 aghfonts フォント名称と内容の再考
    P18.6 aghtex_mathit のアセンダが極端に小さい [2014-09-29]
    P19. ctxc 再構築

    B01.IE7 で文字の大きさを変更すると、レイアウトが滅茶苦茶になる現象 [保留]
    B02.[移動:B07. 上付・下付の問題]
    B03. IE では widehat overbrace 系統が駄目 [保留]
    B04. IE 以外では \! に対応出来ていない。[完 2011/12/03]
    B05. 変な所で改行 in tex\:math td □
    B06. \sum の上下の空白が気になる。[完 2012/06/19 15:27:08]
    B07. 上付・下付の問題
    B07.1 [完]
    B07.2 [完]
    B07.3 [完]
    B07.4 [移動: 問題8]
    B07.5 vphantom に上付・下付を指定できるようにする
    B07.6 Chrome で上付分数の位置が可笑しい。上過ぎる。[完 2012/06/19 23:09:14]
    B07.7 [完]上付と下付の同時指定
    B08. [Opera Bug] 特定の記号の上下に長い空白領域が出来る。
    B09. Chrome で fx.css と sf.css の両方をロードしているらしい問題 [完 2011/05/28]
    B10. Safari で改行が入ってしまう問題 [完 2011/05/28]
    B11. IE7 で分数が正しく表示されていないという事 [完 2011/05/28]
    B12. \(\) や $$ $$ で囲んだ場合の text-align が center になっていない
    B13. (勘違い)
    B14. overbrace underbrace の高さ
    B15. \RAW@ コマンドとセキュリティ [完 2012/06/19]

    これらの中で既に完了している物に関してはログへ送って削除することにする。
    今回はぱっと眺めて分かる範囲でログに送る事にする。
    後でより詳しく中身を調べて整理を行う。

    > P10. \left\right
    > 	・上付・下付に正しく対応する。[完]
    > 	　table.mwg-tex-kakko に対する css が無いので table.className から mwg-tex-kakko を除去
    > 	　
    > 	・\right| のスペースの位置を反対側にした方がよい。 [完]
    > 	　→ | 文字の幅を 1px 迄小さくすることで対応
    > 	　
    > 	・エラーメッセージで alert() を出してしまう
    > 	  これはエラー出力に変えるべき。

    →エラーメッセージで alert() を出してしまう問題について ToDo として残っていたが、
      確認してみた所その様なコードは残っていない様に見える。
      確かにこの事について以前修正を行ったような気もしないでもない。
      と思ったら以下のような記録が残っていた。

    > left コマンドの引数が変な物の場合に alert が表示される。 [2011/12/02 04:02:11]
    >   これは昔デバッグに使用したか何かで表示する様にした物であろう。
    >   今はそんな物が出ても邪魔なだけなので、
    >   表示しない事にした。

    これは処理済みと解釈する。

    > P02. 目次や参照文献や数式番号の実装
    > 	初めの出力では、「識別できるような符号」として出力し、後でそれを置換する
    >
    >   [バグ] ns.Environment のデフォルトの catcher を使っている箇所がなかったので、
    >     一番よく使われている以下の物に置き換える事にした。
    >     catcher:function(doc,ctx){this.epilogue(doc,ctx);},
    >
    >   [バグ] displaymath (div.mwg-tex-eq) と \[\] (tex:math.displaymath) が重複している様な気がするが…。
    >     →mwg.latex.css を調べてみたら、抑も div.mwg-tex-eq には何も設定されていない。
    >       displaymath は新しい定義に移行する事にする。
    >
    >   [バグ] #mode.math!1 としても #mode.math>1 と同じ動作をしているらしい事 [完 2011/12/03 00:22:30]
    >     →新しい引数読み取り (ReadArgument を介さない) では readtype を参照していなかった。
    >       ので、呼出元で readtype=="txt" の場合のコードを追加した。(html escape)
    >
    >   [バグ] #mode.math!1 で正しく terminator が設定されていないと思っていたら…
    >     実は context の初期化に失敗していた。とても馬鹿な事をしていた。
    > <pre class="js diff">
    > @@ latex.cor.js/Document#GetArgHUntil
    >      GetArgHUntil:function(basectx,untilType,untilWord){
    >        this.skipSpaceAndComment();
    > -      var ctx=this.context_cast(ns.ContextFactory[basectx||this.currentCtx,"sub.until"]);
    > +      var ctx=this.context_cast([basectx||this.currentCtx,"sub.until"]);
    >        ctx.until_type=untilType;
    >        ctx.until_word=untilWord;
    >        return this.Read(ctx,true);
    >      },
    > </pre>

    何も ToDo が残っていないので処理済みと解釈する。

    > P05. CSS ファイルの読込に関して
    > P07. 行末の %

    中身がない

    > B02.[移動:B07. 上付・下付の問題]
    > B04. IE 以外では \! に対応出来ていない。[完 2011/12/03]
    > B06. \sum の上下の空白が気になる。[完 2012/06/19 15:27:08]
    >   <li>やはり \sum の上下の空白は気になると言う事</li>
    > B07.1 [完]
    > B07.2 [完]
    > B07.3 [完]
    > B07.4 [移動: 問題8]
    > B07.7 [完]上付と下付の同時指定
    > B09. Chrome で fx.css と sf.css の両方をロードしているらしい問題 [完 2011/05/28]
    > B10. Safari で改行が入ってしまう問題 [完 2011/05/28]
    > B11. IE7 で分数が正しく表示されていないという事 [完 2011/05/28]
    > B13. (勘違い)
    >   eqnarray* の中の = が ＝ に変換されていない。
    >   と思ったら、これは元々変換する様にはなっていなかった。
    >   GMail 埋め込みの場合、eqnarray* 内だと GMail の td に対する CSS Rule が適用されて、
    >   = が短く見える様なフォントになっていた所為で、そう錯覚したのだった。
    >   (或いは = も + や - と同じように全角の ＝ に置き換えた方がよいのかも知れない。
    >
    >   しかも 数字も <tex:num> 等で囲んでいる筈なのに、囲まれていない。
    >   …と思ったら勘違いだった様だ。tex:num は数字を囲む物ではなくて、
    >   分数の分子を囲む物であった。
    >   変換されていない様な気がしたのは、GMail のスタイルシートの
    >   td 要素に対する CSS Rule が勝手に適用されたからの様である。
    > B15. \RAW@ コマンドとセキュリティ [完 2012/06/19]

    これらは解決済とマークされているか、別の項目として独立させたかのどちらかである。


------------------------------------------------------------------------------
  Old memo.txt
------------------------------------------------------------------------------

■ファイルの構成

mwg.*.js

latex.cor.js

ctxc.cs   ─→ ctxc.exe
               │ │
               │ ↓
main.ctx       ┼─→ latex.ctx.js
base.ctx       │
texsym.ctx     │
array.ctx      │
array2.ctx     │
length.ctx     │
counter.ctx    └─┐
                   ↓
documentclass.ctx ─→ documentclass.ctx.js

mwg.latex.pp.css
├→ mwg.latex.ie.css
├→ mwg.latex.fx.css
├→ mwg.latex.sf.css
└→ mwg.latex.op.css

latex.kick.js
latex.kick2.js
latex.kick3.js
mwg.kick.js

■現在の目標

1. array 完全対応 (length 等も含めて)
  array2 に移行
2. \def
3. amsmath/amssymb 対応
4. graphics 対応
  Feynman graph
  epic eepic graphicx
5. color

■個別項目

■計画 (実装の予定)

P00. 細々とした事
  二重改行を \par に変換する事
  → paragraph mode で二重改行を &lt;br/&gt; に変更した。

P01. verbatim の実装
	Context の GetCommandHandler 等を override して何も変更を加えずに出力する handler を返す様にする。
	改行や空白は実体参照で返す。
	但し、\end{verbatim} だけは識別する様にしなければならない。

P03. \def パターンマッチング

  同じコマンドでも複数の構文を定義できるようにする。 (茗荷拡張)
    複数定義した場合には、最近定義した物から順に試していって失敗したら別のを実行する、と言った形式にする。

  検索してみたら ReadArgument を呼び出しているのは一箇所しかない。
  引数の呼出方が分かっている場合に毎回 ReadArgument を介して引数を呼び出すのは非効率的である。
  呼出元を定義する段階でどれか一つの GetArgument 関数に解決してしまった方が良いのではないだろうか…?■

P04. Command からの GetArgument 呼び出しの再考
	GetArgument の種類を指定できるようにする。
	GetArgument の種類については問題点 4. を参照のこと。
	更に、問題点 4. で述べたほかに、GetArgument 時に html 化処理を実行してしまうか、
	それとも、一通りそのままで読み取ってから #n に代入して、その後で処理を実行するかという選択も行える様にする。

P06. 特別記号の熟語
	例えば `` 等の記号を “ とするなど。

	その定義をし易くする為に、先ず、Command の定義を再考したい。
	今の状態だと、コードは整理されているが、
	例えば、引数を持たないコマンドの場合には、空の readArgument 関数を呼び出すなど効率が悪くなっているという反面がある。

	コマンドの定義で分かれ目となりそうなのは、
	1. 引数を受け取るか受け取らないか
	2. 文字列定義の場合
	　・定義文字列をその場で解釈するか
	　・定義時に処理を行ってしまうか
	　・処理を行わないか (直接タグを記述)
	3. 引数について
	　・その引数に既定値が存在するか
	　
	　・引数は読み取り時に処理してしまう (引数の指定の案:#1)
	　・引数の内容をそのまま読み取る (案:#@1)
	　・引数を処理してその文字列部分だけを取り出す。 (案:#!1)
	　
	　・引数読み取りの context は特に指定するか (案:#[mode.math]1)

P08. flatten で context performance に期待
	baseCtxs の handler* を全て一番上に持ってきてしまい、
	baseCtxs を省略することで performance 向上が期待出来るかも

	といっても、flatten 自体の overhead も考えて、
	基本 context のみに対して flatten 処理をするのがよい。

P09. アクセント記号類に関して

案
~~
・対応する文字が Unicode に存在している場合には置換してしまう。
    太字にする場合や、中抜きにする場合など、アクセントにもそれが適用されてしまう
    などの問題が発生しそうな気もするが、気にしない。
    →然し、中身の HTML を観察して問題の無さそうな時にだけ変更するという事も可能であろう。

P11. ドキュメントのクローン
	何回も同じ初期化を行って異なる内容を変換する場合には、
	初期化した状態でドキュメントをクローンしてしまうと良い。
	(Context を汚染しない様に設計したので、簡単に実現できる筈である。)

	初期化が終了した時点で、全ての Context から抜けた状態にあると考える (※) と、
	ctxStack は clone する必要はない。

　・counters の clone
	Counter#Clone
		/// Document#counters を全て変換した後で、
		/// parent や child の参照を更新する必要在り。
		Clone:function(){
			var ret=new ns.Counter(this.name,this.parent);
			ret.val=this.val;
			return ret;
		},
　・context の clone
	Context#Clone
		Clone:function(cloned){
			var ret=new ns.Context(
				this.baseCtxs.clone(), /* #1 */
				mwg.memberwise_clone(this.handlerL),
				mwg.memberwise_clone(this.handlerC),
				mwg.memberwise_clone(this.handlerE),
				this.initializer
			);
			ret.userC=mwg.memberwise_clone(this.userC);
			/* #2 */
			return ret;
		},

		→色々と問題が出て来た
		・#1: 中身の参照を新しく作成した物へ変更しなければならない
		・#2: 他の追加メンバも clone → 更に内部の参照も
		　　即ち、他にもオプションでメンバを追加したり、メンバ関数を上書きしたりしている。
		　それも反映しなければならない。
		　　また、関数が宣言された context の中のローカル変数を参照している場合には、
		　完全なクローンは不可能となる。
		　　よって、Clone を実現する為には、<context の中の参照を全て差し替える事が可能な形式>に
		　書き直さなければならない。

P12. array の類の実装をもう一度やり直したい

<ul>
<li>\settodepth, \settoheight, \settowidth</li>
<li>length
  <p>bug: 2\width の様な使い方をした場合、2*(width の値) と解釈して欲しいが、
  現在の実装では、\width の値とくっついてしまう。
  例えば、\width が 0.1cm だった場合、2\width は 20.1cm になってしまう。
  </p>
</li>
<li>array 実装
  <ul>
  <li>alignment
    <ul>
    <li>!{hoge} (array.sty)</li>
    <li>m{width} (array.sty)</li>
    <li>b{width} (array.sty)</li>
    <li>&gt;{txt} (array.sty)</li>
    <li>&lt;{txt} (array.sty)</li>
    <li></li>
    </ul>
  </li>
  <li>length \arrayrulewidth を使用</li>
  <li>command \arraystretch を使用</li>
  <li>length \tabcolsep (tabular 環境) / \arraycolsep (array 環境) を使用</li>
  <li>\\[2pt]</li>
  <li>\addlinespace{2pt}</li>
  </ul>
</li>
</ul>

P13.2 \makeatletter, \makeatother
  ■TODO:Mode
  * \makeatletter \makeatother
  * verb, verbatim
  * Next1Char for GetArgumentRaw
    コマンドを除いて、全て一文字ずつ txt で
  * array2 alignment 解析
    lcr 等の通常文字も全て SCAN_WT_LTR に
  ■TODO:
    遅延評価について考察
      実のところ読み直しになる確率は小さいので、遅延評価にしない方が良いかも知れない。

P14. Command 再考
	- 完 -

	[今後の課題]

	% 引数の context と使用している場所の context が異なる場合、
	% 外側で定義したユーザーマクロを内側でも使える様にする。
	% (現時点では、内側の context に外側の context が関連付けられていない。)
	%
	% 実は userMacro の検索は Document の中の contextStack から検索されるので、
	% 特に注意しなくても検索されて使用できるのではないか?
  %  →正しく検索されている。(いつか実装を変更した時に解決したのかも知れない。)
	　
	・#01 で html unescape を実行する様になっているが、もっと他の機能を付加しても良い。

	・現在殆どのコマンドが ns.Command に依存しているが、Command2 に移行するという事。

P15. コマンドの対応
　・\above2px
　・\abovewithdelims[]2px
　　長さの引数を読み取る事が出来る様にする。
　　(現状では、length の引数の部分は読み取られない実装になっている)
　　1. ns.Length.Parse 関数を実装した。
　　　後は、GetLengthArgument か何かを実装して、text から
　　　ns.Length.Parse で読み取った部分を切り出せば良いであろう。
　・widehat
　・widetilde
　・stackrel バグ: html が出力される?
　・genfrac
　
　・\enspace \thinspace
　・\hphantom \vphantom \phantom

　[plainTeX]
　・\matrix \pmatrix \bordermatrix
　[AMSMath]
　・\uproot{len}   .. \sqrt[3\uproot{len}]{g}
　・\leftroot{len}
　・\overleftrightarrow
　・\underrightarrow
　・\underleftarrow
　・\underleftrightarrow
　・\dddot
　・\ddddot
　・\binom
　・\tbinom
　・\dbinom
　・\dots \dotsc \dotsb \dotsm \dotsi
　・\lvert \rvert \lVert \rVert \mid
　
　・\begin{split}
　・\begin{align 等}
　
　[???]
　・\iint \iiint \iiiint \idotsint
　・\varinjlim \varprojlim \varlimsup \varliminf
　・\begin{subarray}
　・\sideset
　・\DeclareMathOperator
　・\DeclareMathOperator*
　・\bmod \pmod

  1. [bug] \rm が数式モードで使えない。
    広野さんから要望があったのでようやく対処する事にした。
    実際に LaTeX で試してみた結果:
      数式モードの中では使えないコマンド
        \sl     \sc     \em

      数式モードの中でも使えるコマンド
        \rm     \it     \tt     \bf     \sf

      数式モードの中で使えるが何の効果もないコマンド
        \mc     \gt     \normalfont     \tiny
        \scriptsize     \footnotesize   \small
        \normalsize     \large  \Large  \LARGE
        \huge   \Huge

      数式モードの中で使うと文章モードに突入するコマンド
        \textrm \textsf \texttt \textmc \textgt
        \textmd \textbf \textup \textit \textsc
        \textsl

    @@main.ctx 先ずは、数式モードの中でも使えるコマンドの場所を移動する。

P16. フォント埋込計画 ■
  7. [Opera Bug]Opera で入っていない字体が空白になってしまう事 [経過観察]

  ・css カスケードの問題
    参照 Test14
  ・フォント選択の問題??

  ・IE9 未満では @font-face での font-style,font-weight は認識しないという事だが?
    IE での動作を確認する必要がある■
    →これに関しては、font-style, font-weight に拘わらない様な実装にしたので、
      大丈夫なはず…。

  ・印刷の問題
    Fx で印刷時に Web Fonts が適用されないのはバグらしい
    https://bugzilla.mozilla.org/show_bug.cgi?id=468568
    ・Firefox はファイル出力可能
　    印刷するときのフォントは、Web フォントでない?
    ・Opera はファイル出力可能
    ・Opera は印刷時に @media print を参照しない。 @ murase2011
    ・Opera は表示の段階で @media print の中身を見ている様な気がする @ optiplex2009
    ・
  ・text-shadow (Cr/Op/Fx) による mathbb
    現状では、拡大すると五つの文字列を重ねただけになっている。

    text-shadow の指定でぼかしの程度を 1px に設定する事で改善しないか?
      試しに Firefox で試してみたが、ぼかしの程度を 1px にしたら、
      1px 所か 3px 位滲んでいる様に見え、これは駄目である。
      また、0.1px を指定してみたら、今度はぼかしが全く入らず、
      結局 0 を指定した時と変わらない様である。

    或いは、影の数を四つだけではなく、もっと沢山にするという手もある。
      実際に試してみたら、通常拡大率の時の表示が改善した。
      (袋文字の袋に穴が空いている様な感じだったのが、ちゃんと表示される様になった。)
      然し、拡大した時の見た目は大して変わらない。やはりなめらかにはならない物である。
      ■→八方向に影を重ねる実装を行う

P18. 自作記号フォント

  フォント作成について考える。

P18.1 Font 作成ソフトに関し
  フォント作成に使える良いソフトはないか?
  或いは、簡単なフォント生成プログラムを書けないか?

  A fontforge/cygwin build
    - fontforge build
    # →fork に失敗する。

  B FontForge-20090924 Windows バイナリ
    # より新しい windows 向けバイナリを見つけたので、自分でビルドするのは諦める。
    # と思ったけれど、簡単には動かなそう?
    # 或いは VM を立ち上げてその中で fontforge を動作させた方が良いのかも知れない。

    x 一応動いてはいるが操作をしている途中にすぐにフリーズするし、
    x 特定の操作をするとクラッシュする。
      例えば、操作を間違えた時や、特定のショートカットキー (C-\ など) を押した時など。

    $ fontforge

  C FontForge-20110211 Windows バイナリ
    こちらの方が安定して動作する。
    x しかし、こちらかはこちらで、「輪郭を太らせる」の操作をするとクラッシュする。
      B の方は [輪郭を太らせる] が動作するので、輪郭を太らせる操作をしたい時は B を使用する事にする。
    x 開くファイルを選択する画面で偶にクラッシュする。

    $ fontforge-2012

  D FontForge/Linux
    残された方法は linux の中で FontForge を実行する事である。

  E FontForge-20120731/MinGW [2013-11-04]
    改めて見てみた所、公式 (sourceforge) で Win 版が公開されていた。
    o 輪郭を太らせるの所でクラッシュする事もない様だ。
    x しかし、これはこれで日本語が文字化けしているので操作する時に何が書かれているか分からない。

    $ fontforge-2012w

    2018-02-05 これについては export LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 したら英語になった。
    文字化け問題以外は生じていなかったのでこれを使うのが良さそう。

  F FontForge-20120731/MinGW (縦書き修正パッチ適用済)
    http://www.akenotsuki.com/eyeben/fonts/kanren.html にて公開されていた。
    o こちらを起動してみた所、日本語も文字化けせずに正しく表示されている。
    x 更に、ヒンティングの自動生成を実行すると異常な命令が作成される。
      また、ヒンティングの命令を閲覧しようとするとクラッシュする。
    x フォントのグリフ情報を触っていると時々クラッシュする。

    * 何らかのタイミングでやはり文字化けする様だ?
      →どうやら DISPLAY=localhost:9.0 が既に起動している fontforge の物と被っている為の様だ。
        fontforge.bat を編集して 9.0 の代わりに 8.0 を指定する事にした。

    $ fontforge-2013v

  G 実は github.io の上で最新版が紹介されている。
    そこからダウンロード・インストールして起動した見たところ問題なく動いている。

  以下は纏め。

      起動 硬直 輪郭 日本 Hint
    A  ×   --   --   --   --
    B  ○   ×   ○   ○   ○
    C  ○   ○   ×   ○   ○
    D  △   ×   ○   ○   ○
    E  ○   ○   ○   ※   ○
    F  ○   ○   ○   ○   ×

    % 現状で、結局まともに使えるのは C という事になる。
    % 輪郭を太らせる操作をする時にだけ F を起動する様にすれば良い。

    ※LC_ALL=C で起動すれば文字化けの問題は解決する。
    LC_ALL=C を設定すれば E がクラッシュも少なく良い。

P18.2 字体
font
  > nrightarrow の類を登録 mathsyml
  > mathsymb/validation error を解決
    mathsymb 適用
  >   219a 219b 21ae
  >   mathsymb/maltesecross に名前をつける
  >   mathsymb/doublebarwedge に名前をつける
  >   00a7 00b6
  >   0131 0237 0391-03d6 03f0-03f5 グリフ情報 (C-i)
  >   25bb 25c5-25c7 2664 2667 266d-266f グリフ情報 (C-i)
  >   2a99-2a9a 2a9d-2a9e 2ab1-2ab4 2ac7-2aca 2ad3-2ad6 グリフ情報 (C-i)
    # mathsymb 図形の線の幅は 43-44。
    # 黒塗り図形から作成する時には、線の幅を増やすで -87 で生成すれば良い。
    # /usr/share/texmf-dist/fonts/type1/public/amsfonts
    #   cmmi に♯、♭、ナチュラル、i, j, Weierstrass, vec の類
    #   cmr  にアクセント記号の類

自体の作成の注意点・方法についてもここに纏めておく

* [輪郭を太らせる] は基本的に以下の様にする事にする:
  -縦横の "太さ" は同じにする 例: &W [10] &H [10]
  -線の端は [Butt]
  -線の結びは [Miter]
  -[内側の輪郭線を削除]

  "輪郭を太らせる" はすぐ fontforge がクラッシュするので 2013v を使用する。

* 黒塗り図形から中抜き図形を作成する時は、
  1 [輪郭を太らせる C-S-E] で -87 で外の輪郭だけ残す。
    または 87 で内側の輪郭だけ残す (こちらの方がアウトラインの向き的に良い?)。
  2 それを original の glyph に重ねて、問題が有れば調整する。

* aghtex_mathrm は
  - original の字形が aghtex_mathrm00 (aghtex_mathrm_xlight) で、
  - 輪郭を 10 太らせた物が aghtex_mathrm10 (aghtex_mathrm_light),
  - 輪郭を 20 太らせた物が aghtex_mathrm20 (aghtex_mathrm) である。

P18.3 ディセンダ・アセンダ

  どうも無意味にディセンダとアセンダが出来てしまうのは、
  巨大な文字が中に含まれているからの様な気がする。
  (FontForge が勝手にディセンダとアセンダを設定するという事だろうか?)

  OS/2 タブで設定できる様子である。
  * OS/2 Version は 1 に設定する。
    Automatic のままにしておくとアセンダ・ディセンダの値を設定した時に
    "Weight, Width, Slope onlyは不正な数値を含んでいます" という謎のエラーが出る。
    <a href="http://blog.goo.ne.jp/kennyseed/e/56fd9cfe07d59f64d81c514a99f4206a">FontForge 備忘録 その３。 - night garden &gt; reboot</a>
    <a href="http://pl.digipedia.org/usenet/thread/12024/7902/">Bug in OS/2 infos</a>
    よく分からないが、以下のサイトでは全角の幅で問題が出る時に 1 を指定する様にしているので、特に 1 にしたからといって問題になる事は無さそう?
    <a href="http://blue-red.ddo.jp/~ao/wiki/wiki.cgi?page=%A5%D5%A5%A9%A5%F3%A5%C8%A4%CE%B9%E7%C0%AE">フォントの合成 - ふなWiki</a>

  * Windows Ascent/Descent で WinAscender/WinDescender を強制的に設定できる
    直接数値を指定したいのでオフセットのチェックは外しておく。

    しかし、この値は実際に表示される時の高さとは関係ない様だ。

  * Typography Ascent/Descent で TypoAscender/TypoDescender を強制的に設定できる
    直接数値を指定したいのでオフセットのチェックは外しておく。
    しかし、TypoAscender/Descender を使用しているアプリケーションは殆ど存在しない? らしい?

    しかし、この値は実際に表示される時の高さとは関係ない様だ。

  * 通常の Ascender/Descender はこの画面からは設定できない様子だ。
    どうやら、全てのグリフの点の最小値と最大値が自動的に Ascender/Descender の値になる様だ。
    従って、手で直接指定する事は出来ない。

  仕様がないので ttfname3 を使用して直接 Ascender/Descender の値を書き換えてみる事にした。
  すると、期待した通りに上下の無駄な空白がなくなって表示された。
  しかし、今度は Ascender/Descender をはみ出ている文字の上の部分と下の部分が切れて表示されてしまっている。

  最終的には全ての記号が、切れずに表示されて、しかも行の高さが勝手に高くならない様にしたい。
  これを達成する為には現在存在している記号で無駄に高さの高い物を縮めて自動的に計算される Ascender/Descender を小さくすると良い。

  極端に高さの大きい記号を六つ程修正したが、やはり全体的にディセンダが大きいのが気になる。
  取り敢えず目標として、一番下にある制御点はできるだけ -315 以上になる様にしたい。■
  現状で、一番嵩張っているのは不等号＋等号の複合記号である。
  以下、-315 より下にはみでている字体の一覧

  -333 226d-2271 2278 2279 2288 2289 22e2 22e3 22ec 22ed

P18.4 フォントヒンティング

  フォントヒンティングがうまく動いていないと思っていたら、
  そもそも埋め込まれていなかった様だ。
  今迄にフォント情報でグリッドフィッティングを弄るなど様々な事をしてきたが無駄だった様子。

  フォントヒンティングが TTF フォントに埋め込む為には以下の手順を踏まなければならない。
  1 先ず、[フォント情報]-[レイヤー] のフォントのタイプについて。
    [Font-Type] = [アウトラインフォント]
    レイヤー = [All layers quadratic]
    そもそも TTF フォントがこれだけにしか対応していない?

    Weight, Width, Slope Only は不正な値を含んでいます などの様なメッセージが出たら、
    [フォント情報]-[OS/2]-[その他]-[OS/2 Version] を [Automatic] 以外の何かに変える。

    OS/2
  2 ヒンティングの必要なグリフを全て選択し、
    [ヒント]-[自動ヒンティング] を実行する。
  3 ヒンティングの必要なグリフを全て選択し、
    [ヒント]-[ヒント命令の自動生成] を実行する。
  4 [ファイル]-[フォントを出力] で .ttf フォントを生成する時に、
    [オプション]-[SFNT]-[TrueType Hints] にチェックを入れる。

  →普通に表示される様になった…今迄の苦労は一体…。

P18.5 aghfonts フォント名称と内容の再考

  現在フォントは以下の様に沢山ある

  mathsymb - base cmr
  mathsyma - base ?
    上記二つは cmex, cmsy記号, msbm記号 の類を格納している。
    mathsymb に基本的な記号を全て集めてある。
    mathsyma には同一 Unicode に割り当てられる文字の異体字や、
    mathsymb に格納している字体の変異版を格納している。
    これらには \displaystyle の積分記号なども含む。

  mathit  - cmmi
  mathcal - cmsy
  mathbb  - msbm
  mathbm  - cmmi太字
  mathscr - rsfs (未使用)

  * math?? 等のフォントの類は、殆どアルファベットの部分にしか字体がない。
    記号の部分については空白になっている。ここの部分に記号を格納する事も可能である。
  * 記号類を格納しているフォント mathsym? のアルファベット部分は、
    mathsymb の場合には mathrm を格納する事にした。
    それに伴ってギリシャ文字の部分には直立体に修正したギリシャ文字を格納している。
    mathsyma の場合には何も格納していない。
    mathsyma の空欄は勿体ないので他のアルファベットフォントと結合できる。
  * \bigl \bigr 等によって出力される括弧の異字体は 1+4 種類ある。
    A これらを扱う為に、例えば mathsymb, mathsyma の半角・全角の区点に様々の括弧を割り当てる事ができる。
      しかし合計で 5 字体あるので、その他の区点も利用しなければ symb/syma に納められない。
      更に、\lfloor, \lceil などの一部の括弧については、全角に対応する括弧の区点が存在しない。
      「その他の区点」についても括弧の種類によって対応する物が見付からないかもしれない。
    B それよりは、1+4 種類のフォントに分けて格納した方が綺麗にできる。
      テキストとして選択してコピーしても標準的な unicode point としてコピーされる。
      (A) の方法に従うと、コピー時に色々な区点の色々な括弧 (環境によっては見にくいかもしれない)
      に化けてしまって扱いにくい。
  * 以上を総合して、mathsymb, mathsyma を他のアルファベットフォントと結合する事にした。
    mathsymb については既に cmr と結合した様な状態になっているので、単に mathsymb から mathrm に改称する。
    mathsyma については mathbb と結合する事にする。

  * mathsymb 改称
    1 src/latex/Makefile.pp, out/Makefile.pp, src/addon/Makefile.pp
    2 src/addon/aghtex4ie/mwgtex4ie/dllmain.cpp(install_aghfonts, uninstall_aghfonts)
    3 src/latex/latex.pp.css
    4 src/latex/res/aghfonts/aghtex_mwgsymb*
  * mathsyma+mathbb 結合 → mathbb
    できるだけブロック体の方が良いので (イタリックにして後で問題になったら嫌なので)、
    ブロック体であり、かつ、latex の標準で利用可能である mathbb のフォントと結合する事にした。
    1 mathbb の太さ 10 版を作成する
    2 mathbb の文字を amthsyma に移動する。
    3 mathbb を backup/ に移動し、mathsyma を mathbb に改称する。
    3 src/latex/Makefile.pp, src/addon/Makefile.pp, out/Makefile.pp: mathsyma 削除
    4 src/addon/aghtex4ie/mwgtex4ie/dllmain.cpp(install_aghfonts, uninstall_aghfonts): mathsyma 削除
    5 src/latex/latex.pp.css: aghtex_mathsyma.* を aghtex_mathbb に変更。

  以上の書き換えによって、aghfonts のフォントセットは現在以下の通りとなっている。

    名称      alphabet    greeks      symbols   備考
  1 mathrm    直立体      直立体      基本      -
  2 mathit    イタリック  イタリック  変体3     -
  3 mathbb    黒板体      -           変体1     -
  4 mathfrak  亀甲        -           変体2     -
  5 mathcal   カリグラフ  -           変体4     -
  6 mathscr   スクリプト  -           -         (未使用)
  7 mathbm    イタリ太字  イタリ太字  -         (synthesize補完用)

P18.6 aghtex_mathit のアセンダが極端に小さい [2014-09-29]
  勿論 aghtex_mathrm (mathsymb) より小さい。
  しかし、他の標準的なフォントと較べても小さい。
  これだと \textstyle で2段重ねにする時に重なり合ってしまって良くない。
  \displaystyle であっても様々な所で、高さが数字などとずれている可能性がある。

  アセンダを調整する手っ取り早い方法は高さのある文字を無理矢理収録する事である。
  適当に slash をコピーして、その上端を 819 (設計上のアセンダ) になる様にした。

P19. ctxc 再構築

  現在 .ctx から .js への変換プログラム ctxc.exe は C# で書かれている。
  しかし、C# は余り移植性がない。何か別の言語で書き直したい。
  楽そうなのは awk などを使う方法である。
  しかし awk は行指向の言語であるので現在の行に跨った変換をする方式に対応するのは難しい。


  A 現在の文法は変えない
    o 現在の文法を変えて実装しやすくすると言う手もあるが、
      既に書かれたコードを何れにしても変換できる様にしたいので
      結局鍼灸療法の文法に対応する事になって意味がない。
      といって、完全に新しい文法しか受け付けなくするのも面倒である。
      更に、文法を変えた後にやはり余り良い文法ではなかったと元に戻すのも大変である。

  B JavaScript の文法で扱える範囲に戻す
    実は一番現実的なのはこれかもしれない。
    o 将来他の人がソースコードを弄りたいと思った時に変な言語を使っていると問題がある。
      説明をするのも面倒だし、折角興味を持ってくれた人の興味を削ぐ形にもなる。
    o また、現在の変換後のコードは似た様なコードが並んでいて冗長な気がする。
      これも自動生成されたコードとはいえあまり綺麗でないので嬉しくない。
    x 現在、一つの .js ファイルに統合する事を目指しているが、
      これを実行すると一つの .ctx も余さず全部 JavaScript の形式に戻さなければならないのではないか。
      →既存の .ctx は既存の ctxc.exe を使って変換した後に更に結合をする事にすればよい。

  取り敢えず B の方向性がうまく行くかどうかを考える。

    * @"文字列リテラル" は TeX を扱う上でないと困るので残す。
      これは幸いにして行に収まるリテラルなので awk/sed 等で処理可能である。

    * 取り敢えず Command2 から対応していく事にする。

    * Command1 についても Command1 用の cmdtype を定義する事にすれば
      直ぐに対応する事が出来る様な気がする。
      - 或いは、この際だから B の方向に .ctx を書き直す時に Command2 の形式に書き直しても良い。
        Command1 の形式は昔に書かれた物だから再度テストした方が良いかもしれない、
        という意味に置いて Command1 のまま残しておいた様な所もあるが、
      - 実際の所 Command1 だからと言って大してテストしている訳でもないので、
        古いコマンドを Command1 として区別しておく必要もないと思う。

    * command 書換手順

      - command f?\cmdName(argdef) def;
        _Ctx.DefineCommand({cmdName:["f?;argdef",def]});
        に書き換える。

      - context "contextName" new(){ ... }
      - context "contextName" { ... }
        (function(){
          var _Ctx=ns.ContextFactory.GetInstance("contextName");
          var _CtxName="contextName"; // ← environment 生成コードから使用される
          ...
        })();

        ※元々のコードは with で囲む物であったが、
          スコープを明確に分離する事にした。
          1 これでクロージャで外側の変数を拾ったりする事がなくなる反面、
            context 間で共通の変数は外側で宣言する必要が出る。
          2 AddCommandHandler などと factory の関数を直接使用しているコードは、
            全て _Ctx.AddCommandHandler などの様に書き直す必要がある。

        ※因みに以下の形式に書き換えるのであれば今の書き方でも
          先頭行に対する置換だけ行えば良いので OK?
          new function(){
            var _Ctx=ns.ContextFactory.GetInstance("contextName");
            var _CtxName="contextName"; // ← environment 生成コードから使用される

          }

    * 取り敢えず texsym.ctx を用いて、簡単に移行する事が出来そうな事を確かめた。
      それよりも ctxc.cs を改造して結合用の出力を行う様に変更したい。
      その為に必要な事は…

      1 agh.register などのスクリプト本体が行うべき処理は出力しない
      2 無駄なコメントやクレジットは不要 (どうせ各 .ctx ファイルに記入しそうな気もするし)
      3


■表示の不具合

B01.IE7 で文字の大きさを変更すると、レイアウトが滅茶苦茶になる現象 [保留]
  [現象]
  display:inline を指定している要素全般に対して、
  その外から見た幅が 0 になってしまう現象。
  (要するに、後続する要素が上に重なって表示されてしまう。)
  ※ IE6 では起こっていない。

  [調査]
  所が、色々な display を試したりしても、
  もっと表示が崩れるか、或いは表示が変わらないかのどちらかである。
  と、色々別の要素に入れてみたり etc. を試していても動かなくて諦めかけていた所、
  何故かいきなり正常に表示される様になった。
  コードをこの現象に気付く前の状態に戻してみたが、やはり正常に表示される。
  結局原因は分からずじまいである。

  [\frac 変更]
  序でだが、IE7 では display:inline の類に IE6 よりは対応している様で、
  分数の表示も、他のブラウザと同様の html で実現できるようであったので、
  他のブラウザと同じ html を出力する様に変更した。

  [現象]
  と…茲で、再度この現象が発生した…。
  どうやら、初めに表示した段階では、表示が崩れる事がないが、
  頁の文字の大きさを変更するとこの現象が発生する様である。

  同様に、\hat コマンドなど文字の上に別の記号を重ねるコマンドでも、
  文字の大きさを変更すると本体の文字が表示されなくなるという現象がある事が分かった。

  [対応] 今の所、対応する気はない。
  文字の大きさを変更しなければ一応表示出来ているので、
  html は一応ちゃんと IE 向けに調整出来ていると思いたい。
  その上で、IE 上の操作で表示が崩れるという現象にも対応できる様に html を調整するのは面倒。
  というか、普通に表示出来ている様に見えるのに、文字の大きさを変えると表示出来なくなると言うのは…。

B03. IE では widehat overbrace 系統が駄目 [保留]
  1. IE6: 中に積分記号が混じっていると、何故か真ん中に降りてくる。
  2. IE7: 上の方に寄りすぎ。

    見てみると、後方互換モードでは期待した位置に表示されている。
    標準準拠モードでは上に依りすぎた位置に表示されている。

B05. 変な所で改行 in tex\:math td □
  他にも white-space:nowrap を追加するべき場所はないだろうか?
  →今の所、特に無い様な気がする。

B07. 上付・下付の問題
B07.5 vphantom に上付・下付を指定できるようにする■
B07.6 Chrome で上付分数の位置が可笑しい。上過ぎる。[完 2012/06/19 23:09:14]
  ■他のブラウザでも上付分数が上に寄りすぎていないか調べる。

B08. [Opera Bug] 特定の記号の上下に長い空白領域が出来る。
  (大体解決した。line-height による方法)

  ・≧≦記号でも同様の事が起こる。■
    これらの記号は特別なタグで囲まれていないので、これも fsym 等で囲んで、
    line-height の指定等が適用される様にする必要有り

B12. \(\) や $$ $$ で囲んだ場合の text-align が center になっていない■
  これは、初期の頃の見た目の問題で敢えて center にしていなかった様な気がする。
  (自分のブラウザは文字の大きさに対して横幅が広いので、
  中央揃えにすると数式が存外右端に移動してしまう。)
  然し、現状では例えば mwg.kick.js では p.tex:eqn は
  わざわざ text-align:center にしているので、元々のコードでも中央にしてしまって OK である。

  →と思っていたら、\(-\) は $-$ で囲むのと同じ事だから text-align も何もないし、
    $$-$$ に到っては抑も対応していなかった。

B14. overbrace underbrace の高さ
    今の実装では、overbrace, underbrace に付加した文字列の高さが確保されていない。
    つまり、手動で空白を空けておかなければ下の行や上の行に重なって表示されてしまう。
    然し、分数の表示の仕組みを利用すれば、行の高さを保持したまま、
    上に文字列を付加したり下に文字列を付加したりする事が出来るはずである。

<li>mwg.LaTeX2XHTML - このまとめを書いていて気付いた事
  <ul>
  <li>どうやら &lt; が HTML にそのまま (&amp;lt; にせずに) 出力されているらしい事</li>
  </ul>
</li>

■その他の不具合

2. 「領域終了例外」というのは見ても良く分からないので、変更する事にした。
  grep して変更する。現在は取り敢えず end_of_region という名前になっている。
  unexpectedEOR に変更した方が良いか?

  * 全体的にロカールに対応した方が良いかも知れない。■
  * \unknown command undefined と表示されてしまう。[完]

■変更

■注意
実装を弄ったりする際の注意

1. 新しい context を定義する時
　text_modifier やら initializer やら何やら色々あって、
　どの様に実装したらよいのかという事が分からなくなってしまったので、茲に整理する事にする。

　・initializer に於いて直接の context だけで行いたい処理がある場合
　
　　例: 引数読み取り
　　\def\sample#myctx>1{}
　　\sample{xyz {bbb} ccc} で、aaa 及び ccc だけに text_modifier を適用したい場合
	context "myctx"{
		context.initializer=function(mainctx){
			if(mainctx.baseCtxs.$contains(this)){ // 直接の context だけ
				mainctx.text_modifier=function(){
					処理
				}
			}
		};
	}
　
　関連情報
　~~~~~~~~
　・context_cast に関して
　　context_cast に配列を渡した場合には、
　　　配列内の context を base にした新しい context が <作成> される。
　　　因みに配列の中の要素に関しては一々 context_cast がかけられる。
　　context_cast に文字列を渡した場合には、Document に属する既存の context が <選択> される。
　　　未だ document に指定した名前の context が用意されていない場合に限り、
　　　同名の ContextFactory から context が作成される。
　　context_cast に Context インスタンスを渡した場合はその儘
　　context_cast に ContextFactory インスタンスを渡した場合には、それを以て新 context を <作成> する。
　　
　　文字列を渡した際には既に document に存在している物が選択されるだけなので、
　　「内 context に入る度に毎回大量の context が作成されるのではないか?」という心配はなくなる。
　　結局、作成される context の数は、配列を渡した回数と ContextFactory を渡した回数を足した物だけである。

　・Command2 の引数読み取りの際の説明で 「context "○○" を用いて読み取り」等という物があるが、
　　これはその名前の context を直接用いる訳ではなくて、
　　それを直接の base に持つ context を作成して読み取るという事である。
　　
　　従って、「"○○" を用いて読み取り」の context を initializer 内で認識する為には、
　　mainctx.baseCtxs の中に ○○ が入っているか否かを確認すれば良いだけである。
　
　・text_modifier が継承されない事
　　継承をしたければ initializer 内で毎回設定する必要がある。
　　
　　この様な実装になっているのは、text_modifier の既定値が "null" だからである。
　　この時、もし継承されるようなことになっていれば、例えば、
　　\[\mbox{aaaa}\]
　　なる TeX ソースについて \mbox 内の aaaa にも math mode での text 修飾が実施されてしまう。
　　
　　因みに既定値が null であるのは、
　　1. 勿論 text は大量に出て来る物であって、
　　　それらに対して一々関数を実行していると処理が重くなるからである。
　　　
　　　然し、実際の所は text ハンドラが用意されているか居ないのかの判定もしなければならない訳だし、
　　　text の scanner 読み取りの方が空関数を呼び出すよりも処理が思い様に思う。
　　　ので、この理由は説得力に欠ける。
　　2. text 修飾が複数ある時
　　　例えば、修飾 A を実行する context の中で、修飾 B を実行する context がある場合には、
　　　修飾 B だけ実行すればよいという訳ではない。
　　　と言って、修飾 B を実行した後で修飾 A を実行したり、
　　　或いは修飾 A を実行した後に修飾 B を実行するというのも解決にはならない。
　　　
　　　実際には、修飾の重なり方によって、その場その場で修飾の重なり方が異なる。
　　　従って、単純な継承の機構や、修飾の既定値などは全然意味を為さないのである。
　　

■透明 png の作り方纏め

☆ PIXIA を使う方法
1. PIXIA をインストール
2. PIXIA Plugin の S_PNG.dll を導入する
3. PIXIA で透明になっていないファイルを開く
4. 名前を付けて保存で png 形式にして [保存]
5. Dialogue が出て設定を訊かれるので、"左上の pixel の色を透明にする" という英語を選んで保存する

この方法だと、パレットが変になって、例えば IE で正しく表示されなかったりする。
VIX を使った方法もあったので、そちらの方がよい。

☆ VIX を使う方法
1. VIX を入手
2. 透明になっていないファイルを開く
3. メニューの減色で 256 色ぐらいにする
4. 別名で保存で、透明にしたい色を指定して保存する。

■CSS Hack

・<!--[if IE 6]<style>...</style>-->
  IE 6 のみ

・namespace\:* 要素指定
  IE ○
  Fx ×

・.namespace\:className クラス指定
  IE ×
  Fx ○

・elem>elem 子指定
  IE6 ×
  Fx ○
