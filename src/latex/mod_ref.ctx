/* -*- mode: js; coding: utf-8 -*- */

var _Mod = {};
ns.Modules["mod:ref"] = _Mod;
var CTXV_LABEL_EQ = 'mod_ref/label:eq';
var CTXV_LABEL_FIG = 'mod_ref/label:fig';
var CTXV_LABEL_TB = 'mod_ref/label:tb';

var mod_counter = ns.Modules["mod:counter"];

agh.memcpy(ns.Modules["core"].ErrorMessages, {
  "mod:ref.env:figure.cmd:label.ContextBroken": [
    "BUG/env:figure", "the context data is missing. the context data has removed or the context was replaced."],
  "mod:ref.env:table.cmd:label.ContextBroken": [
    "BUG/env:table", "the context data is missing. the context data has removed or the context was replaced."],
  "mod:ref.Document.AddContentsLine.UnsupportedContentsFile": [
    "file '{file}' n/a", "the contents file, '{file}', is not supported."],
  "mod:ref.env:thebibliography.cmd:bibitem.MissingEnvData": [
    '\\bibitem not in thebibliography',
    "failed to retrieve the environment data. the command, \\bibitem, should be used just in the thebibliography environment."],
  // "mod:ref.env:thebibliography.cmd:bibitem.MissingEnvData": [
  //   'BUG/env:thebibliography',
  //   "環境情報の取得に失敗しました。\n\\bibitem コマンドは thebibliography 環境直下にある必要があります。"]
  "mod:ref.cmd:label.EmptyLabel": [
    "empty \\label", "the argument of \\label is empty. specify the non empty name."]
});

_Mod.CreateSectionCommand = function(param) {
  var arr = param.html.split('#');
  var hasTitleNumber = arr.length == 3;

  // * param.httag 全体を括る要素の名前
  // * param.htclass 全体を括る要素のクラス名
  // * param.html    中身の html を指定する文字列
  //     文字列の中に # が一個含まれる時は、それが章題に変換される。
  //     文字列の中に # が二個含まれる時は、
  //     一つ目が章番号に変換され、二つ目が章題に変換される。
  // * param.counter セクション番号を数える為のカウンタ
  // ? param.refname
  //   関数の場合 (function(doc) {})
  //     \ref 用の文字列を生成する関数
  //     省略した時は \ref で参照する事はできない。
  //   文字列の場合
  //     \ref 用の文字列を生成する為の TeX ソース
  // ? param.get_number 章題に使う章番号の文字列を生成する関数 function(doc)
  //     param.html に二つの # が含まれる時に使われる。
  //     省略した時は代わりに refname の結果が使用される。
  //     この場合 refname 関数が設定されている必要がある。

  return ns.Command2("fA", "#[]>1#>2", function(doc, cmdName, aread) {
    // prologue
    if (param.emitnote)
      _Mod.WriteFootnote(doc.currentCtx.output, doc);
    if (param.counter)
      mod_counter.stepcounter(doc, param.counter);

    var referenceName = "";
    if (param.refname) {
      if (param.refname instanceof Function)
        referenceName = refname(doc);
      else {
        doc.scanner.InsertSource("{" + param.refname + "}");
        referenceName = doc.GetArgumentHtml();
      }
      doc.references.lastSection = referenceName;
      var id = doc.references.createSectionId(doc, param.counter);
    }

    // read arguments
    var argv = aread.read(doc, cmdName);

    // content
    var buff = doc.currentCtx.output.buff;
    if (id)
      buff.push('<', param.httag, ' class="', param.htclass, '" id="', id, '">');
    else
      buff.push('<', param.httag, ' class="', param.htclass, '">');

    if (hasTitleNumber) {
      var titleNumber = param.get_number ? param.get_number(doc) : referenceName;
      buff.push(arr[0], titleNumber, arr[1], argv[2], arr[2]);
    } else {
      buff.push(arr[0], argv[2], arr[1]);
    }

    if (param.toctype) {
      var tocline = argv[1].trim();
      if (tocline == "")
        tocline = argv[2];
      if (referenceName != "")
        tocline = referenceName + " " + tocline;
      doc.AddContentsLine(doc, "toc", param.toctype, tocline, id);
    }

    buff.push('</', param.httag, '>');
  });
};


context "global" {
  command f\label("#1") {
    var name = agh.Text.Escape(argv[1].trim(), "html-attr");
    if (name == "") {
      doc.currentCtx.output.error("mod:ref.cmd:label.EmptyLabel", null, "\\label (mod:ref.section)");
      return;
    }

    // 頁番号
    doc.references.label_page_map[name] = mod_counter.arabic(doc, "page");

    // 節番号
    var lastsec = doc.references.lastSection;
    if (lastsec != "")
      doc.references.displayedText['ref@' + name] = lastsec;
    if (doc.references.lastSectionId) {
      doc.references.label_id_map[name] = doc.references.lastSectionId;
    } else {
      var buff = doc.currentCtx.output.buff;
      buff.push('<a class="aghtex-label" name="aghtex.', name, '"></a>');
    }
  };
  command f\ref("#@1") {
    var output = doc.currentCtx.output;
    var name = agh.Text.Escape(argv[1].trim(), "html-attr");
    var text = doc.references.displayedText['ref@' + name];
    if (text != null) {
      output.buff.push('<a class="aghtex-ref" href="#aghtex.', name, '">', text, '</a>');
    } else {
      output.buff.push('<a class="aghtex-ref" href="#aghtex.', name, '"><tex:ref ref="ref.', name, '">?</tex:ref></a>');
    }
  };
  command f\pageref(#@1) {
    var output = doc.currentCtx.output;
    var name = agh.Text.Escape(argv[1].trim(), "html-attr");
    var text = doc.references.label_page_map[name];
    if (text != null)
      output.buff.push('<a class="aghtex-ref" href="#aghtex.', name, '">', text, '</a>');
    else
      output.buff.push('<a class="aghtex-ref" href="#aghtex.', name, '"><tex:ref ref="ref.', name, '">?</tex:ref></a>');
  };
  command f\cite("#@1") {
    var a = argv[1].split(',');
    var buff = doc.currentCtx.output.buff;
    buff.push('[');
    for (var i = 0, iN = a.length; i < iN; i++) {
      var ref = 'bib.' + agh.Text.Escape(a[i].trim(), "html-attr");
      if (i > 0) buff.push(', ');
      buff.push('<a class="aghtex-cite" href="#aghtex.', ref, '"><tex:ref ref="', ref, '">?</tex:ref></a>');
    }
    buff.push(']');
  };
}

//------------------------------------------------------------------------------
//  \tableofcontents

var DOCV_FILE_TOC = 'mod:ref/toc';
var DOCV_FILE_LOF = 'mod:ref/lof';
var DOCV_FILE_LOT = 'mod:ref/lot';
function get_contents_file(doc, key) {
  var ret = doc[key];
  if (!ret) {
    ret = new ns.Writer();
    ret.data = [];
    doc[key] = ret;
  }
  return ret;
}

ns.Document.prototype.AddContentsLine = function(doc, file, type, content, id) {
  var counter = doc.GetCounter("page");
  var page = counter != null ? counter.arabic() : "?";

  switch (file) {
  case "toc":
    var f = get_contents_file(this, DOCV_FILE_TOC);
    f.buff.push(
      '<tex:i class="aghtex-toc-item"><table class="aghtex-css-table aghtex-toc-table aghtex-toc-table--', type, '"><tbody><tr class="aghtex-css-tr">',
      '<td class="aghtex-css-td aghtex-toc-cell-label">', content, '</td>',
      '<td class="aghtex-css-td aghtex-toc-cell-hfill"><tex:i class="aghtex-toc-hfill">&nbsp;</tex:i></td>',
      '<td class="aghtex-css-td aghtex-toc-cell-page">');

    if (id)
      f.buff.push('<a class="aghtex-ref" href="#', id, '">', page, '</a>');
    else
      f.buff.push(page);

    f.buff.push('</td></tr></tbody></table></tex:i>');
    f.data.push({type: type, content: content, id: id});
    break;
  case "lof":
    // TODO
  case "lot":
    // TODO
  default:
    doc.currentCtx.output.error(
      "mod:ref.Document.AddContentsLine.UnsupportedContentsFile", {file: file},
      "\\addcontentsline (mod:ref)");
    break;
  }
};

context "mode.para" {
  command f\addcontentsline(#1#2#>3) {
    var file = argv[1].trim();
    var type = agh.Text.Escape(argv[2].trim(), "html-attr");
    doc.AddContentsLine(doc, file, type, argv[3]);
  };
  command f\addtocontents(#1#2) {
    var file = argv[1].trim();
    var content = argv[2];
    switch (file) {
    case "toc":
      var f = get_contents_file(this, DOCV_FILE_TOC);
      f.buff.push(content);
      break;
    case "lof":
      var f = get_contents_file(this, DOCV_FILE_LOF);
      f.buff.push(content);
      break;
    case "lot":
      var f = get_contents_file(this, DOCV_FILE_LOT);
      f.buff.push(content);
      break;
    }
  };
}

//------------------------------------------------------------------------------
//  \begin{figure}, \begin{table}

_Mod["cmd:label:eq"] = ns.Command2("f", "#1", function(doc, argv) {
  var name = agh.Text.Escape(argv[1].trim(), "html-attr");
  if (name == "") {
    doc.currentCtx.output.error("mod:ref.cmd:label.EmptyLabel", null, "\\label (mod:ref.eqno)");
    return;
  }

  // 頁番号
  doc.references.label_page_map[name] = mod_counter.arabic(doc, "page");

  // 式番号
  var counter = doc.GetCounter('equation');
  if (counter != null)
    doc.references.displayedText['ref@' + name] = counter.arabic();

  var labels = doc.GetContextVariable(CTXV_LABEL_EQ);
  if (labels == null) {
    doc.currentCtx.output.error(
      "mod:ref.env:equation.cmd:label.ContextBroken", null,
      "\\label (mod:ref.eqno)");
    return;
  }
  labels.push(name);
});

#%m mod_ref::defineFigureEnvironment (
var cmd_caption_%figure% = ns.Command2("fA", "#>1", function(doc, cmdName, ar) {
  var counter = doc.GetCounter("%figure%");
  var counterNumber = '?';
  if (counter != null) {
    counter.Step();
    counterNumber = counter.arabic();
  }

  var argv = ar.read(doc, cmdName);

  var buff = doc.currentCtx.output.buff;
  buff.push(
    '<tex:i class="aghtex-%figure%-caption">%Title% ', counterNumber, ': ',
    argv[1], '</tex:i>');
});

_Mod["cmd:label:%fig%"] = ns.Command2("f", "#1", function(doc, argv) {
  var name = agh.Text.Escape(argv[1].trim(), "html-attr");
  if (name == "") {
    doc.currentCtx.output.error("mod:ref.cmd:label.EmptyLabel", null, "\\label (mod:ref.%figure%)");
    return;
  }

  // 頁番号
  doc.references.label_page_map[name] = mod_counter.arabic(doc, "page");

  // 図番号, 表番号
  var counter = doc.GetCounter('%figure%');
  if (counter != null)
    doc.references.displayedText['ref@' + name] = counter.arabic();

  var labels = doc.GetContextVariable(CTXV_LABEL_%FIG%);
  if (labels == null) {
    doc.currentCtx.output.error(
      "mod:ref.env:%figure%.cmd:label.ContextBroken", null,
      "\\label (mod:ref.env:%figure%)");
    return;
  }
  labels.push(name);
});

var environment_params_%figure% = {
  suppressOutput: true,
  prologue: function(doc, ctx) {
    var va = doc.GetOptionalArgumentRaw(); // currently not used

    ctx.SetContextVariable(CTXV_LABEL_%FIG%, []);
    ctx.userC["caption"] = cmd_caption_%figure%;
    ctx.userC["label"] = _Mod["cmd:label:%fig%"];
  },
  epilogue: function(doc, ctx) {
    var buff = doc.currentCtx.output.buff;
    var labels = ctx.GetContextVariable(CTXV_LABEL_%FIG%);
    if (labels.length == 0) {
      buff.push('<tex:i class="aghtex-%figure%">');
    } else {
      var id = "aghtex." + labels[0];
      buff.push('<tex:i class="aghtex-%figure%" id="', id, '">');
      for (var i = 1; i < labels.length; i++)
        doc.references.label_id_map[labels[i]] = id;
    }

    buff.push(ctx.output.toHtml());
    buff.push('</tex:i></tex:i>');
  },
  context: "mode.para"
};
ns.ContextFactory["mode.para"].AddEnvironment("%figure%", environment_params_%figure%);
#%)
#%x mod_ref::defineFigureEnvironment.r/%figure%/figure/.r/%Title%/Figure/.r/%FIG%/FIG/.r/%fig%/fig/
#%x mod_ref::defineFigureEnvironment.r/%figure%/table/ .r/%Title%/Table/ .r/%FIG%/TB/ .r/%fig%/tb/

context "env.thebibliography" new("mode.para") {
  command f\bibitem("#!1") {
    var buff = doc.currentCtx.output.buff;
    var envdata = doc.currentCtx["env:thebibliography"];
    if (envdata != null) {
      if (envdata.hasItem) {
        buff.push('</li>\r\n');
      } else {
        envdata.hasItem = true;
      }

      var name = agh.Text.Escape(argv[1].trim(), "html-attr");
      buff.push(' <li id="aghtex.bib.', name, '">');

      var counter = doc.GetCounter('enumiv');
      if (counter != null) {
        counter.Step();
        var c = counter.arabic();
        buff.push("[", c, "] ");
        doc.references.displayedText['bib@' + name] = c;
      }
    } else {
      doc.currentCtx.output.error(
        "mod:ref.env:thebibliography.cmd:bibitem.MissingEnvData", null,
        "\\bibitem");
    }
  };
}

//------------------------------------------------------------------------------
//  \begin{thebibliography}

ns.ContextFactory["mode.para"].AddEnvironment("thebibliography", {
  prologue: function(doc, ctx) {
    var maxItems = doc.GetArgumentRaw();

    ctx["env:thebibliography"] = {hasItem: false, maxItems: maxItems};
    doc.currentCtx.output.buff.push('<h2 class="aghtex-article-thebibliography">References</h2>');
    doc.currentCtx.output.buff.push('<ul class="aghtex-thebibliography">');

    var counter = doc.GetCounter('enumiv');
    if (counter != null) counter.Clear();
  },
  epilogue: function(doc, ctx) {
    var envdata = ctx["env:thebibliography"];
    if (envdata != null) {
      if (envdata.hasItem) doc.currentCtx.output.buff.push('</li>\r\n');
    } else {
      throw STR_REPLACED_CTX;
    }
    doc.currentCtx.output.buff.push('</ul>\r\n');
  },
  catcher: function(doc, ctx) { this.epilogue(doc, ctx); },
  context: "env.thebibliography"
});

agh.memcpy(ns.Document.prototype, {
  getReferenceText: function get_reference_text(type, name) {
    switch (type) {
    case "ref":
      return this.references.displayedText['ref@' + name] || null;
    case "bib":
      return this.references.displayedText['bib@' + name] || null;
    case "contents":
      if (name == "toc" || name == "lof" || name == "lot") {
        var f = this["mod:ref/" + name];
        if (f != null) return f.toHtml();
      }
      return null;
    default:
      return null;
    }
  },
  ResolveReferences: function() {
    if (this.html == null) return;
    var self = this;
    return this.html = this.html.replace(/<tex:ref ref="(\w+)\.([^"<>]+)">\?<\/tex:ref>|<a class="aghtex-ref" href="#aghtex\.([^"]+)">/g, function($0, $1, $2, $B1) { //
      if ($1 != null && $1 != "") {
        return this.getReferenceText($1, $2) || $0;
      } else if ($B1 != "" && $B1) {
        if ($B1 in self.references.label_id_map)
          return '<a class="aghtex-ref" href="#' + self.references.label_id_map[$B1] + '">';
        else
          return $0;
      } else
        return $0;
    });
  },
  ResolveReference: function(target) {
    // a.aghtex-ref
    var elems = target.getElementsByTagName('a');
    for (var i = 0, iN = elems.length; i < iN; i++) {
      var elem = elems[i];
      if (!/(?:^|\s)aghtex-ref(?:\s|$)/.test(elem.className)) continue;
      if (!elem.href.startsWith('#aghtex.')) continue;
      var label = elem.href.substr(8);
      if (label in this.references.label_id_map)
        elem.href = '#' + this.references.label_id_map[label];
    }

    // tex:ref
    var elems = target.getElementsByTagName('tex:ref');
    for (var i = 0, iN = elems.length; i < iN; i++) {
      var elem = elems[i], m;
      var ref = elem.getAttribute("ref");
      if (!ref) continue;
      var m = ref.match(/^(\w+)\.(.*)$/);
      if (!m) continue;
      var text = this.getReferenceText(m[1], m[2]);
      if (!text) continue;
      elem.removeAttribute("ref");
      elem.innerHTML = agh.Text.Escape(text, "html");
    }
  }
});

//------------------------------------------------------------------------------
//  \footnote

var CTXV_FOOTNOTE = 'mod_ref/footnote';
var CTXV_MPFOOTNOTE = 'mod_ref/is_mpfootnote';

context "mode.para" {

#%m mod_ref::footnote (
  var %footnote% = {
    get_counter: function(doc) {
      return doc.GetCounter("%footnote%");
    },
    write_mark: function(doc, output, label, mark) {
      output.buff.push('<a class="aghtex-footnotemark" href="#aghtex-%fn%-', label, '">%C%', mark, '</a>');
    },
    add_item: function(doc, number, content, label) {
      var output = doc.GetContextVariable(CTXV_FOOTNOTE);
      if (output != null) {
        output.buff.push(
          '<li class="aghtex-footnotetext"><tex:i id="aghtex-%fn%-', label,
          '" class="aghtex-footnotetext-mark">%C%', number,
          '</tex:i> ', content, '</li>');
      } else {
        output = doc.currentCtx.output;
        output.buff.push(
          ' [%C%', number, ' <tex:i class="aghtex-footnotetext-inline">',
          content, '</tex:i>] ');
      }
    }
  };
#%)
#%x mod_ref::footnote.r|%footnote%|footnote|  .r|%fn%|fn|  .r|%C%||
#%x mod_ref::footnote.r|%footnote%|mpfootnote|.r|%fn%|mpfn|.r|%C%|*|

  function get_footnote(doc) {
    if (doc.GetContextVariable(CTXV_MPFOOTNOTE))
      return mpfootnote;
    else
      return footnote;
  }

  _Mod.WriteFootnote = function(output, ctx) {
    //! @param[out] output output stream : ns.Writer
    //! @param[in]  ctx    context of footnotes : ns.Context or ns.Document

    var fn_out = ctx.GetContextVariable(CTXV_FOOTNOTE);
    if (!fn_out) return;

    var ht = fn_out.toHtml();
    if (ht == "") return;

    fn_out.clear();
    output.buff.push('<tex:i class="aghtex-footnote"><ul class="aghtex-footnote">', ht, '</ul></tex:i>');
  };

  command f\footnotemark("#[]1") {
    var fn = get_footnote(doc);

    var output = doc.currentCtx.output;
    var c = agh.Text.Escape(argv[1].trim(), "html-attr");
    if (c == "") {
      var counter = fn.get_counter(doc);
      if (counter != null) {
        counter.Step();
        c = counter.arabic();
      } else {
        c = "?";
      }
    }

    fn.write_mark(doc, output, c, c);
  };

  command f\footnotetext("#[]1#mode.para>2") {
    var fn = get_footnote(doc);

    var c = agh.Text.Escape(argv[1].trim(), "html-attr");
    if (c == "") {
      var counter = fn.get_counter(doc);
      if (counter != null)
        c = counter.arabic();
      else
        c = "?";
    }

    fn.add_item(doc, c, argv[2], c);
  };

  command f\footnote("#[]1#mode.para>2") {
    var fn = get_footnote(doc);

    var c = agh.Text.Escape(argv[1].trim(), "html-attr");
    if (c == "") {
      var counter = fn.get_counter(doc);
      if (counter != null) {
        counter.Step();
        c = counter.arabic();
      } else {
        c = "?";
      }
    }

    var output = doc.currentCtx.output;
    fn.write_mark(doc, output, c, c);
    fn.add_item(doc, c, argv[2], c);
  };
}

