// -*- mode: js -*-

var mod_core = ns.Modules["core"];
var _Mod = ns.Modules["mod:length"] = {};

agh.memcpy(ns.Modules["core"].ErrorMessages, {
  "mod:length.InvalidLengthName": ["invalid length name", "'{lname}' は有効な length 名ではありません。\nlength 名は \\ で始まる必要があります。"]
});

/* 注意: 利用できる単位については以下でハードコーディングされている事に注意する。
 * 単位を追加するためにはこれらも一緒に更新する必要がある。
 *
 *   - このファイルに含まれる正規表現
 *   - core.js:ns.Document.prototype.ReadDimension の正規表現
 */
var UNITDATA = {
  // reference: http://tex.stackexchange.com/questions/41370/what-are-the-possible-dimensions-sizes-units-latex-understands

  // inches
  "in": {mm: 25.4  , outunit: "in"},
  bp: {mm: 25.4 / 72 , outunit: "in"}, // 72 bp (big point) = 1 in

  // meters
  cm: {mm: 10      , outunit: "cm"},
  mm: {mm: 1       , outunit: "mm"}, // 10 mm := 1 cm

  // points
  pt: {mm: 0.3515  , outunit: "pt"},
  pc: {mm: 4.218   , outunit: "pc"}, // pc (pica) := 0.166 in, 12 pc = 1 pt,
  sp: {mm: 5.363e-6, outunit: "pt"}, // 65536 sp (scaled point) = 1 pt

  // didot points
  dd: {mm: 0.37597 , outunit: "mm"}, // 1 dd (didot point) = 15625/41559 mm
  cc: {mm: 4.51166 , outunit: "mm"}, // 1 cc (cicero) = 12 dd

  // letter sizes
  ex: {mm: 1.8     , outunit: "ex"},
  em: {mm: 3.2     , outunit: "em"}, // 1 ex ~ 9/16 em?
  zw: {mm: 3.2     , outunit: "em"}, // 全角幅
  zh: {mm: 3.2     , outunit: "em"}, // 全角高さ
  mu: {mm: 3.2/18  , outunit: "em"}, // 18 mu (math unit) = 1 em

  // display pixels
  px: {
    mm: 25.4 / (agh.browser.vIE ? screen.deviceXDPI : 96),
    outunit: "px"
  }
};

ns.Length = function(value, unit) {
  if (value) {
    if (value instanceof ns.Length) {
      this.val = value.val;
      this.unit = value.unit;
      if (value.plus instanceof ns.Length)
        this.plus = new ns.Length(value.plus);
      if (value.minus instanceof ns.Length)
        this.minus = new ns.Length(value.minus);
      return;
    }

    value = this.parseNumber(value);
    if (unit instanceof ns.Length) {
      // 例: new ns.Length(0.5, textwidth);
      this.val = unit.val * value;
      this.unit = unit.unit;
    } else {
      // 例: new ns.Length(2.0, "cm");
      this.val = value;
      this.unit = this.parseUnit(unit || "pt");
    }
  } else {
    // 例: new ns.Length;
    this.val = 0;
    this.unit = "in";
  }
};
agh.memcpy(ns.Length, {
  // 将来的には GetLengthArgument か何かの関数で使用するつもり(現在は使用されていない)
  ParseDimension: function(text) {
    /// <summary>
    /// 指定した文字列から length を読み取ります。
    /// </summary>
    /// <returns>
    /// 読み取った情報を元に作成した Length インスタンスを返します。
    /// src_index に、指定した文字列の何処まで読み取ったかの情報を格納します。
    /// </returns>
    var m = text.match(/^\s*([\-+]?)\s*([\d\.]+)\s*(in|bp|cm|mm|pt|pc|sp|dd|cc|em|ex|zw|zh|mu|px)/i);
    if (!m) return null;
    var value = parseFloat(m[1] + m[2]);
    if (isNaN(value)) value = 0;
    var unit = m[3].toLowerCase();
    var index = m[0].length;

    var ret = new ns.Length();
    ret.val = value;
    ret.unit = unit;
    ret.src_index = index;
    return ret;
  }
});
agh.memcpy(ns.Length.prototype, {
  parseNumber: function(text) {
    var ret = parseFloat(text);
    if (isNaN(ret)) return 0;
    return ret;
  },
  parseUnit: function(text) {
    var a = text.match(/(?:in|bp|cm|mm|pt|pc|sp|dd|cc|em|ex|zw|zh|mu|px)\b/i);
    return a != null ? a[0].toLowerCase() : "px";
  },
  changeUnit: function(number, beforeUnit, afterUnit) {
    if (beforeUnit == afterUnit) return number;
    var beforeData = UNITDATA[beforeUnit] || UNITDATA["pt"];
    var afterData = UNITDATA[afterUnit] || UNITDATA["pt"];
    return number * beforeData.mm / afterData.mm;
  },
  toString: function(showStretch) {
    var data = UNITDATA[this.unit] || UNITDATA["pt"];
    var outunit = data.outunit;
    var body = this.changeUnit(this.val, this.unit, outunit).toString() + outunit;
    if (showStretch) {
      if (this.plus instanceof ns.Length)
        body += " plus " + this.plus.toString(false);
      if (this.minus instanceof ns.Length)
        body += " minus " + this.minus.toString(false);
    }
    return body;
  },
  addValue: function(arg, subtracts) {
    if (arg == null) return;

    var n = 0, u = "px";
    if (arg instanceof ns.Length) {
      if (arg.plus instanceof ns.Length) {
        if (this.plus instanceof ns.Length)
          this.plus.addValue(arg.plus);
        else
          this.plus = new ns.Length(arg.plus);
      }
      if (arg.minus instanceof ns.Length) {
        if (this.minus instanceof ns.Length)
          this.minus.addValue(arg.minus);
        else
          this.minus = new ns.Length(arg.minus);
      }
      n = arg.val;
      u = arg.unit;
    } else {
      arg = arg.toString();
      n = this.parseNumber(arg);
      u = this.parseUnit(arg);
    }
    var delta = this.changeUnit(n, u, this.unit);
    if (subtracts)
      this.val -= delta;
    else
      this.val += delta;
  },
  subtractValue: function(arg) {
    this.addValue(arg, true);
  },
  setValue: function(arg) {
    if (arg == null) return;

    if (arg instanceof ns.Length) {
      this.val = arg.val;
      this.unit = arg.unit;
    } else {
      arg = arg.toString();
      this.val = this.parseNumber(arg);
      this.unit = this.parseUnit(arg);
    }
  }
});
context "global" {
  //=========================================================================
  //    関数達
  //=========================================================================
  /// \ のついた length 名を受け取って、\ を取り除いた部分を返します。
  function get_lenName(doc, cmdname) {
    var lname = cmdname.trim();
    if (lname.substr(0, 1) != '\\') {
      doc.currentCtx.output.error("mod:length.InvalidLengthName", {lname: lname}, "\\" + cmdname);
      return null;
    }
    return lname.substr(1);
  }
  function setlength(doc, name, value) {
    if (!(name in doc.currentCtx.dataL))
      doc.currentCtx.dataL[name] = new ns.Length();
    doc.currentCtx.dataL[name].setValue(value);
  }
  function addtolength(doc, name, value) {
    if (!(name in doc.currentCtx.dataL)) {
      doc.currentCtx.dataL[name] = new ns.Length();
      var parent = doc.GetLengthData(name);
      if (parent != null) doc.currentCtx.dataL[name].setValue(parent);
    }
    doc.currentCtx.dataL[name].addValue(value);
  }

  function CreateLengthHandler(readMethodName) {
    var result = new ns.Command2("f", null, function(doc, args) {
      var name = args[0];
      doc.skipSpaceAndComment();
      if (doc.scanner.is(mod_core.SCAN_WT_LTR, "=")) {
        doc.scanner.Next();
        // setlength mode
        var dimen = doc[readMethodName]();
        if (dimen) setlength(doc, name, dimen);
      } else {
        // output value mode (拡張)
        doc.currentCtx.output.buff.push((doc.GetLengthData(name) || "0in").toString());
      }
    });
    result.isDimensionHandler = true;
    return result;
  }
  var dimensionHandler = CreateLengthHandler('ReadDimension');
  var lengthHandler = CreateLengthHandler('ReadLength');

  //=========================================================================
  //    コマンドの定義
  //=========================================================================
  agh.memcpy(ns.Document.prototype, {
    NewLength: function(name) {
      // グローバルに定義
      this.SetMacroHandler(name, lengthHandler, /* isGlobal= */ true);
    },
    NewDimension: function(name) {
      // グローバルに定義
      this.SetMacroHandler(name, dimensionHandler, /* isGlobal= */ true);
    }
  });

  _Ctx.DefineCommand({
    newdimen: ['f;#@1', function(doc, argv) {
      var lname = get_lenName(doc, argv[1]);
      if (lname == null) return;
      doc.NewDimension(lname);
    }],
    newlength: ['f;#@1', function(doc, argv) {
      var lname = get_lenName(doc, argv[1]);
      if (lname == null) return;
      doc.NewLength(lname);
    }],
    setlength: ['f;#@1#L', function(doc, argv) {
      if (argv[2] == null) return;
      var lname = get_lenName(doc, argv[1]);
      if (lname == null) return;
      setlength(doc, lname, argv[2]);
    }],
    addtolength: ['f;#@1#L', function(doc, argv) {
      if (argv[2] == null) return;
      var lname = get_lenName(doc, argv[1]);
      if (lname == null) return;
      addtolength(doc, lname, argv[2]);
    }]
  });
}

