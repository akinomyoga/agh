// -*- mode: js -*-

var mod_core = ns.Modules["core"];
var _Mod = ns.Modules["mod:length"] = {};

agh.memcpy(ns.Modules["core"].ErrorMessages, {
  'mod:length.InvalidLengthName': [
    "InvalidLengthName", "The name '{name}' is not avalid name for lengths. The length name should have a command form."],
  'mod:lentgh.InvalidCommandArgument': [
    "InvalidCommandArgument", "The specified argument '{value}' does not have a command form."],
  'mod:lentgh.UnrecognizedLengthName': [
    "UnrecognizedLengthName", "The specified name '{value}' does not name a length/dimension/skip."],
  'mod:length.cmd:the.UnknownRegister': [
    '\\the: UnknownRegister', "The name '{value}' does not name any of registers, such as count/dimension/skip/etc."]
});

/* 注意: 利用できる単位については以下でハードコーディングされている事に注意する。
 * 単位を追加するためにはこれらも一緒に更新する必要がある。
 *
 *   - このファイルに含まれる正規表現
 *   - core.js:ns.Document.prototype.ReadDimension の正規表現
 */
var UNITDATA = {
  // reference: http://tex.stackexchange.com/questions/41370/what-are-the-possible-dimensions-sizes-units-latex-understands

  // inches
  "in": {mm: 25.4  , outunit: "in"},
  bp: {mm: 25.4 / 72 , outunit: "in"}, // 72 bp (big point) = 1 in

  // meters
  cm: {mm: 10      , outunit: "cm"},
  mm: {mm: 1       , outunit: "mm"}, // 10 mm := 1 cm

  // points
  pt: {mm: 0.3515  , outunit: "pt"},
  pc: {mm: 4.218   , outunit: "pc"}, // pc (pica) := 0.166 in, 12 pc = 1 pt,
  sp: {mm: 5.363e-6, outunit: "pt"}, // 65536 sp (scaled point) = 1 pt

  // didot points
  dd: {mm: 0.37597 , outunit: "mm"}, // 1 dd (didot point) = 15625/41559 mm
  cc: {mm: 4.51166 , outunit: "mm"}, // 1 cc (cicero) = 12 dd
  nd: {mm: 0.375   , outunit: "mm"}, // 1 nd (new didot) = 0.375 mm
  nc: {mm: 4.5     , outunit: "mm"}, // 1 nc (new cicero) = 12 nd = 4.5 mm

  // letter sizes
  ex: {mm: 1.8     , outunit: "ex"},
  em: {mm: 3.2     , outunit: "em"}, // 1 ex ~ 9/16 em?
  zw: {mm: 3.2     , outunit: "em"}, // 全角幅
  zh: {mm: 3.2     , outunit: "em"}, // 全角高さ
  mu: {mm: 3.2/18  , outunit: "em"}, // 18 mu (math unit) = 1 em

  // display pixels
  px: {
    mm: 25.4 / (agh.browser.vIE ? screen.deviceXDPI : 96),
    outunit: "px"
  }
};

ns.Length = function(value, unit) {
  if (value) {
    if (value instanceof ns.Length) {
      this.val = value.val;
      this.unit = value.unit;
      if (value.plus instanceof ns.Length)
        this.plus = new ns.Length(value.plus);
      if (value.minus instanceof ns.Length)
        this.minus = new ns.Length(value.minus);
      return;
    }

    value = this.parseNumber(value);
    if (unit instanceof ns.Length) {
      // 例: new ns.Length(0.5, textwidth);
      this.val = unit.val * value;
      this.unit = unit.unit;
      if (unit.plus instanceof ns.Length)
        this.plus = new ns.Length(value, unit.plus);
      if (unit.minus instanceof ns.Length)
        this.minus = new ns.Length(value, unit.plus);
    } else {
      // 例: new ns.Length(2.0, "cm");
      this.val = value;
      this.unit = this.parseUnit(unit || "pt");
    }
  } else {
    // 例: new ns.Length;
    this.val = 0;
    this.unit = "in";
  }
};
agh.memcpy(ns.Length, {
  // 将来的には GetLengthArgument か何かの関数で使用するつもり(現在は使用されていない)
  ParseDimension: function(text) {
    /// <summary>
    /// 指定した文字列から length を読み取ります。
    /// </summary>
    /// <returns>
    /// 読み取った情報を元に作成した Length インスタンスを返します。
    /// src_index に、指定した文字列の何処まで読み取ったかの情報を格納します。
    /// </returns>
    var m = text.match(/^\s*([\-+]?)\s*([\d\.]+)\s*(in|bp|cm|mm|pt|pc|sp|dd|cc|n[cd]|em|ex|zw|zh|mu|px)/i);
    if (!m) return null;
    var value = parseFloat(m[1] + m[2]);
    if (isNaN(value)) value = 0;
    var unit = m[3].toLowerCase();
    var index = m[0].length;

    var ret = new ns.Length();
    ret.val = value;
    ret.unit = unit;
    ret.src_index = index;
    return ret;
  }
});
agh.memcpy(ns.Length.prototype, {
  parseNumber: function(text) {
    var ret = parseFloat(text);
    if (isNaN(ret)) return 0;
    return ret;
  },
  parseUnit: function(text) {
    var a = text.match(/(?:in|bp|cm|mm|pt|pc|sp|dd|cc|n[cd]|em|ex|zw|zh|mu|px)\b/i);
    return a != null ? a[0].toLowerCase() : "px";
  },
  changeUnit: function(number, beforeUnit, afterUnit) {
    if (beforeUnit == afterUnit) return number;
    var beforeData = UNITDATA[beforeUnit] || UNITDATA["pt"];
    var afterData = UNITDATA[afterUnit] || UNITDATA["pt"];
    return number * beforeData.mm / afterData.mm;
  },
  toString: function(showStretch) {
    var data = UNITDATA[this.unit] || UNITDATA["pt"];
    var outunit = data.outunit;
    var body = this.changeUnit(this.val, this.unit, outunit).toString() + outunit;
    if (showStretch) {
      if (this.plus instanceof ns.Length && this.plus.val != 0)
        body += " plus " + this.plus.toString(false);
      if (this.minus instanceof ns.Length && this.minus.val != 0)
        body += " minus " + this.minus.toString(false);
    }
    return body;
  },
  addValue: function(arg, subtracts) {
    if (arg == null) return;

    var n = 0, u = "px";
    if (arg instanceof ns.Length) {
      if (arg.plus instanceof ns.Length) {
        if (this.plus instanceof ns.Length)
          this.plus.addValue(arg.plus);
        else
          this.plus = new ns.Length(arg.plus);
      }
      if (arg.minus instanceof ns.Length) {
        if (this.minus instanceof ns.Length)
          this.minus.addValue(arg.minus);
        else
          this.minus = new ns.Length(arg.minus);
      }
      n = arg.val;
      u = arg.unit;
    } else {
      arg = arg.toString();
      n = this.parseNumber(arg);
      u = this.parseUnit(arg);
    }
    var delta = this.changeUnit(n, u, this.unit);
    if (subtracts)
      this.val -= delta;
    else
      this.val += delta;
  },
  subtractValue: function(arg) { // currently unused
    this.addValue(arg, true);
  },
  setValue: function(arg) {
    if (arg == null) return;

    if (arg instanceof ns.Length) {
      this.val = arg.val;
      this.unit = arg.unit;
      this.plus = arg.plus;
      this.minus = arg.minus;
    } else {
      arg = arg.toString();
      this.val = this.parseNumber(arg);
      this.unit = this.parseUnit(arg);
      this.plus = null;
      this.minus = null;
    }
  }
});
context "global" {
  //=========================================================================
  //    関数達
  //=========================================================================

  function CreateLengthHandler(readMethodName) {
    var result = new ns.Command2("f", null, function(doc, args) {
      var name = args[0];
      doc.skipSpaceAndComment();
      if (doc.scanner.is(mod_core.SCAN_WT_LTR, "=")) {
        doc.scanner.Next();
        // setLength mode
        var dimen = doc[readMethodName]();
        if (dimen) setLength(doc, name, dimen);
      } else {
        // output value mode (拡張)
        doc.currentCtx.output.buff.push((doc.GetLengthData(name) || "0in").toString());
      }
    });
    result.isDimensionHandler = true;
    return result;
  }
  var dimensionHandler = CreateLengthHandler('ReadDimension');
  var lengthHandler = CreateLengthHandler('ReadLength');

  agh.memcpy(ns.Document.prototype, {
    NewLength: function(name) {
      // グローバルに定義
      this.SetMacroHandler(name, lengthHandler, /* isGlobal= */ true);
    },
    NewDimension: function(name) {
      // グローバルに定義
      this.SetMacroHandler(name, dimensionHandler, /* isGlobal= */ true);
    }
  });

  function setLength(doc, name, value) {
    if (!(name in doc.currentCtx.dataL))
      doc.currentCtx.dataL[name] = new ns.Length();
    doc.currentCtx.dataL[name].setValue(value);
  }

  function addToLength(doc, name, value) {
    if (!(name in doc.currentCtx.dataL)) {
      doc.currentCtx.dataL[name] = new ns.Length();
      var parent = doc.GetLengthData(name);
      if (parent != null) doc.currentCtx.dataL[name].setValue(parent);
    }
    doc.currentCtx.dataL[name].addValue(value);
  }

  //=========================================================================
  //    コマンドの定義
  //=========================================================================

  function getNewLengthName(doc, argv) {
    var arg = argv[1].trim();
    if (!arg.startsWith('\\')) {
      doc.currentCtx.output.error('mod:length.InvalidLengthName', {name: arg}, "\\" + argv[0] + " (mod:length)");
      return null;
    }
    return arg.substr(1);
  }

  function getLengthName(doc, argv) {
    var arg = argv[1].trim();
    if (!arg.startsWith('\\')) {
      doc.currentCtx.output.error('mod:lentgh.InvalidCommandArgument', {value: arg}, "\\" + argv[0] + " (mod:length)");
      return null;
    }
    var name = arg.slice(1);
    var handler = doc.currentCtx.GetCommandHandler(doc, name);
    if (!handler || !handler.isDimensionHandler) {
      doc.currentCtx.output.error('mod:lentgh.UnrecognizedLengthName', {value: arg}, "\\" + argv[0] + " (mod:length)");
      return null;
    }
    return name;
  }

  /// @fn measureHtml(html)
  ///   指定した HTML を表示したときの width, height (baseline から上の高さ),
  ///   depth (baseline から下の高さ) を計算します。
  function measureHtml(html) {
    var scale = 100;

    var factory = document.createElement("div");
    var buff = [];
    buff.push('<tex:i style="position: absolute; z-index: -1; visibility: hidden; display: block; white-space: nowrap; vertical-align: baseline">');
    buff.push('<tex:i style="display: inline-block; vertical-align: baseline; width: 1em; height: 1px;"></tex:i>');
    buff.push('<tex:i style="display: inline-block; vertical-align: baseline;">', html, '</tex:i>');
    buff.push('</tex:i>');
    factory.innerHTML = buff.join("");
    var container = factory.firstChild;
    var mark = container.firstChild;
    var span = mark.nextSibling;

    document.body.appendChild(container);
    var em = mark.offsetWidth;
    var width  = (span.offsetWidth) / em;
    var height = (mark.offsetTop + 1) / em;
    var depth  = (span.offsetHeight - mark.offsetTop - 1) / em;

    if (em < scale) {
      /* font-size で拡大して高精度で決定する。
       *
       *   但し、等比拡大になっているときのみにする。
       *   内部で 1cm や 3mm などの絶対指定が含まれる場合、
       *   font-size でスケールしないので、font-size
       *   を変えて拡大して計測すると誤った結果になるため。
       */
      container.style.fontSize = scale + 'px';
      var e1 = mark.offsetWidth;
      var w1 = (span.offsetWidth) / e1;
      var h1 = (mark.offsetTop + 1) / e1;
      var d1 = (span.offsetHeight - mark.offsetTop - 1) / e1;
      if (Math.abs(w1 - width ) < 1 / em + 1 / e1) width  = w1;
      if (Math.abs(h1 - height) < 1 / em + 1 / e1) height = h1;
      if (Math.abs(d1 - depth ) < 1 / em + 1 / e1) depth  = d1;
    }

    document.body.removeChild(container);

    return {width: width, height: height, depth: depth};
  }

  _Ctx.DefineCommand({
    newdimen: ['f;#@1', function(doc, argv) {
      var lname = getNewLengthName(doc, argv);
      if (lname == null) return;
      doc.NewDimension(lname);
    }],
    newlength: ['f;#@1', function(doc, argv) {
      var lname = getNewLengthName(doc, argv);
      if (lname == null) return;
      doc.NewLength(lname);
    }],
    setlength: ['f;#@1#L', function(doc, argv) {
      if (argv[2] == null) return;
      var name = getLengthName(doc, argv);
      if (name) setLength(doc, name, argv[2]);
    }],
    addtolength: ['f;#@1#L', function(doc, argv) {
      if (argv[2] == null) return;
      var name = getLengthName(doc, argv);
      if (name) addToLength(doc, name, argv[2]);
    }],
    settowidth: ['f;#@1#>2', function(doc, argv) {
      var name = getLengthName(doc, argv);
      if (name == null) return;
      var metric = measureHtml(argv[2]);
      if (metric.width > 0) setLength(doc, name, new ns.Length(metric.width, 'em'));
    }],
    settoheight: ['f;#@1#>2', function(doc, argv) {
      var name = getLengthName(doc, argv);
      if (name == null) return;
      var metric = measureHtml(argv[2]);
      if (metric.height > 0) setLength(doc, name, new ns.Length(metric.height, 'em'));
    }],
    settodepth: ['f;#@1#>2', function(doc, argv) {
      var name = getLengthName(doc, argv);
      if (name == null) return;
      var metric = measureHtml(argv[2]);
      if (metric.depth > 0) setLength(doc, name, new ns.Length(metric.depth, 'em'));
    }],
    the: ['f;#@1', function(doc, argv) {
      argv[1] = argv[1].trim();
      if (!argv[1].startsWith('\\')) {
        doc.currentCtx.output.error('mod:lentgh.InvalidCommandArgument', {value: argv[1]}, "\\the (mod:length)");
        return;
      }

      var name = argv[1].slice(1);
      var handler = doc.currentCtx.GetCommandHandler(doc, name);
      if (handler) {
        if (handler.isDimensionHandler) {
          var data = doc.GetLengthData(name);

          // Note: join 時に文字列にされるとは言え、
          //   toString() で現在の値を固定する必要がある。
          doc.currentCtx.output.buff.push(data.toString(true));
          return;
        }
        // ToDo: \count など。
      }

      doc.currentCtx.output.error('mod:length.cmd:the.UnknownRegister', {value: argv[1]}, "\\the (mod:length)");
    }]
  });
}
